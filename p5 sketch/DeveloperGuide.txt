oracle® java me embedded developer’s guide release e july this document is a resource for software developers and release engineers who want to build applications for the oracle java me embedded software for embedded devices oracle java me embedded developer’s guide release e copyright ©  oracle andor its affiliates all rights reserved this software and related documentation are provided under a license agreement containing restrictions on use and disclosure and are protected by intellectual property laws except as expressly permitted in your license agreement or allowed by law you may not use copy reproduce translate broadcast modify license transmit distribute exhibit perform publish or display any part in any form or by any means reverse engineering disassembly or decompilation of this software unless required by law for interoperability is prohibited the information contained herein is subject to change without notice and is not warranted to be errorfree if you find any errors please report them to us in writing if this is software or related documentation that is delivered to the us government or anyone licensing it on behalf of the us government the following notice is applicable us government end users oracle programs including any operating system integrated software any programs installed on the hardware andor documentation delivered to us government end users are commercial computer software pursuant to the applicable federal acquisition regulation and agencyspecific supplemental regulations as such use duplication disclosure modification and adaptation of the programs including any operating system integrated software any programs installed on the hardware andor documentation shall be subject to license terms and license restrictions applicable to the programs no other rights are granted to the us government this software or hardware is developed for general use in a variety of information management applications it is not developed or intended for use in any inherently dangerous applications including applications that may create a risk of personal injury if you use this software or hardware in dangerous applications then you shall be responsible to take all appropriate failsafe backup redundancy and other measures to ensure its safe use oracle corporation and its affiliates disclaim any liability for any damages caused by use of this software or hardware in dangerous applications oracle and java are registered trademarks of oracle andor its affiliates other names may be trademarks of their respective owners intel and intel xeon are trademarks or registered trademarks of intel corporation all sparc trademarks are used under license and are trademarks or registered trademarks of sparc international inc amd opteron the amd logo and the amd opteron logo are trademarks or registered trademarks of advanced micro devices unix is a registered trademark of the open group this software or hardware and documentation may provide access to or information about content products and services from third parties oracle corporation and its affiliates are not responsible for and expressly disclaim all warranties of any kind with respect to thirdparty content products and services unless otherwise set forth in an applicable agreement between you and oracle oracle corporation and its affiliates will not be responsible for any loss costs or damages incurred due to your access to or use of thirdparty content products or services except as set forth in an applicable agreement between you and oracle this documentation is in preproduction status and is intended for demonstration and preliminary use only it may not be specific to the hardware on which you are using the software oracle corporation and its affiliates are not responsible for and expressly disclaim all warranties of any kind with respect to this documentation and will not be responsible for any loss costs or damages incurred due to the use of this documentation the information contained in this document is for informational sharing purposes only and should be considered in your capacity as a customer advisory board member or pursuant to your beta trial agreement only it is not a commitment to deliver any material code or functionality and should not be relied upon in making purchasing decisions the development release and timing of any features or functionality described in this document remains at the sole discretion of oracle this document in any form software or printed matter contains proprietary information that is the exclusive property of oracle your access to and use of this confidential material is subject to the terms and conditions of your oracle master agreement oracle license and services agreement oracle partnernetwork agreement oracle distribution agreement or other license agreement which has been executed by you and oracle and with which you agree to comply this document and information contained herein may not be disclosed copied reproduced or distributed to anyone outside oracle without prior written consent of oracle this document is not part of your license agreement nor can it be incorporated into any contractual agreement with oracle or its subsidiaries or affiliates contents preface ix audience ix related documents ix operating system commands ix shell prompts ix conventions ix developer migration guide overview modified permission model device io namespace  generic connection framework changes  java embedded vm proxy and console design starting the vm proxy on the desktop server mode connection client mode connection vm proxy options using the command line interface  amsinstall amslist  amsinfo  amsupdate amsremove amsrun  amsstop blacklist  propertieslist  getproperty setproperty  saveproperties iii netinfo  netset  netreconnect devicelist devicechange shutdown cd delete  get  ls  mkdir rmdir pwd put exit  ksdelete ksexport  ksimport  kslist  ksclients  dumpheap  security overview of oracle java me embedded permissions  accessing peripherals  signing the application with api permissions  cldc permissions filepermission runtimepermission loggingpermission  propertypermission keystore permissions  keystorepermission  device io permissions adcpermission  atpermission counterpermission dacpermission  devicemgmtpermission  genericpermission  gpiopinpermission  gpioportpermission icpermission  iv mmiopermission  pwmpermission  spipermission  uartpermission watchdogtimerpermission  smart cards  apdupermission  cellular  cellularpermission generic events eventpermission comm protocol commprotocolpermission  connector cbs file read  file write  rtsp  sms datagram protocol datagramprotocolpermission dtlsprotocolpermission  dtlsserverpermission file protocol  fileprotocolpermission hypertext transfer protocols httpprotocolpermission httpsprotocolpermission imc  imcprotocolpermission  multicast protocols  multicastprotocolpermission push protocols pushregistrypermission socket protocols  socketprotocolpermission sslprotocolpermission location locationpermission media recordcontrol videocontrol autostart v autostartpermission power powerstatepermission  software management  swmpermission  runtime update runtimeupdatepermission  software management suiteinstalllistener interface suitelistener interface suitemanager interface  tasklistener interface  taskmanager interface managerfactory class the suite class  suiteinstaller class suitemanagementtracker class  swmpermission class  task class installererrorcode  general purpose inputoutput setting a gpio output pin  working with a breadboard blinking an led testing output and input pins  working with the ic bus experimenting with a segment display  experimenting with a x lcd display  the serial peripheral interface spi bus using the spi bus to communicate with an adc  working with java me encryption connecting to an ssl server  authenticating an ssl server  accessing the keystore  configuring the board as a secure server a java me optimization techniques design a vi memory a threads a system callbacks a inputoutput a general tips a application size a b java me embedded properties modifying the properties file b using the commandline interface b c signing an imlet suite's jar file instructions for using jadtool c using the jadtool utility c handling expired certificates c options summary c d managing keys and certificates running mekeytool d using the mekeytool utility d me keystores d working directory for the emulator d creating and managing multiple me keystores d importing a key d listing available keys d deleting a key d replacing a key d mekeytool summary d e oem extensions using oem extensions e f encryption algorithms supported algorithms for windows linux and raspberry pi platforms f tlsv tlsv f glossary vii viii preface this book describes how to create and build oracle java me embedded software from its source code audience this document is intended for developers who want to build oracle java me embedded software for embedded devices related documents for a complete list of documents with the oracle java me embedded software see the release notes operating system commands this document does not contain information on basic commands and procedures such as opening a terminal window changing directories and setting environment variables see the software documentation that you received with your system for this information shell prompts shell prompt bourne shell $ windows directory> conventions the following text conventions are used in this document convention meaning boldface boldface type indicates graphical user interface elements associated with an action or terms defined in text or the glossary italic italic type indicates book titles emphasis or placeholder variables for which you supply particular values ix convention meaning monospace monospace type indicates commands within a paragraph urls code in examples text that appears on the screen or text that you enter x developer migration guide learn the changes between version of the oracle java me embedded and the current instance version  if you need to port earlier applications to the latest version of the oracle java me embedded runtime you can safely skip this chapter if you have not developed imlets using version or earlier of the oracle java me embedded platform topics • overview • modified permission model • device io namespace • generic connection framework changes overview java me is an umbrella terms for two new jsrs cldc and meep cldc is a major evolution of cldc while meep is a major evolution of impng java me also includes support for the new device io api cldc is backwards compatible with cldc but includes alignment with the java se and language core apis and vm functionality java sestyle classbased finegrain permissions as well as a significantly enhanced generic connection framework gcf meep allows execution of most impng applications and includes significant enhancements by leveraging the cldc features improvements in the application platform improved software provisioning and management footprint scalability through optional apis improved connectivity options and more flexible authentication and authorization mechanisms the device io api defines an api that allows java applications running on small embedded devices to access peripheral devices from a peripheral device external to the host device to a peripheral chip embedded in the host device it is strongly recommended that developers familiarize themselves with the cldc specification and api the meep specification and api and the device io api modified permission model there are a number of new permissions that object methods must obtain before they can successfully access peripherals these permissions are covered in more detail in chapter however developers should be aware of the following • java me now uses java sestyle classbased finegrain permissions developer migration guide • applications should request the jdkdiodevicemgmtpermission permission when accessing any devices connected to the board through protocols such as gpio ic spi or mmio in addition to the permissions required by the communication bus they are using • the syntax for the permissions request has changed the request now includes the device identifier and any specific actions that are requested if applicable device identifiers eg gpio spi are listed in the appropriate appendix of the getting started guide for that development board • a single request cannot be used for multiple devices; each permissions must be listed separately for example you cannot do the following midletpermission jdkdiogpiopinpermission gpiogpio open instead you must do this midletpermission jdkdiogpiopinpermission gpio open midletpermission jdkdiogpiopinpermission gpio open in some cases you can use an asterisk as a wildcard device io namespace the device access api of the oracle java me embedded platform is now referred to as the device io api and is no longer part of the comoracledeviceaccess package instead all classes now use the jdkdio namespace in addition • classes that contain peripheral have been changed to device so for example peripheralmanager has been replaced by devicemanager and peripheralpermission has been replaced by devicepermission • support now exists for pulse width modulation pwm on all platforms • almost all of the individual class methods are unchanged generic connection framework changes the impng javaxmicroedition classes are now replaced by the generic connection framework gcf with jsr and java me embedded profile classes meep with jsr there are a large number of changes that are included in these new profiles see the specification pages online for more information on each of these classes device io namespace developer’s guide java embedded vm proxy and console starting from version the oracle java me embedded software moves as much cpu intensive processing away from the embedded java vm as possible instead a separate application running on the host side interacts across the network with the internals of the java vm with this design the vm only sends lowlevel events to the host application such as state change information methods transition and objects information the information is then stored and analyzed on host side and the host application in turn provides the information to all external profilers monitors and managers external tools can treat the java se host application as if it was the vm itself besides performance and footprint goals this approach minimizes development efforts on porting different component communications to new physical transport such as usb serial or bluetooth instead this vm proxy application also known as the developer agent and the vm proxy channel becomes the intercomponent tool and javacall cldc meep jsrs and sdk components can all take advantage of it topics • design • starting the vm proxy on the desktop • vm proxy options • using the command line interface design the vm proxy uses a single transport connection to transmit all data for any subsystem see figure for an illustration of this design; the vm proxy is the middle component java embedded vm proxy and console figure vm proxy and agent design for java embedded be sure not to confuse the vm proxy with the vm agent the vm agent consists of native code and is located on the embedded device the vm proxy is written in java se and is launched on the desktop host the proxy also provides a software management swm api similar to the javaxmicroeditionswm package as declared in the java me embedded profile meep specification this api is an extension of the previous application management system ams api of previous versions of the oracle java me embedded platform and can be leveraged by me sdk ides and the cli to manage applications with any connected device the transport layer between the vm proxy desktop and the vm agent device is protocolagnostic by design however it is currently implemented for tcp serial com port and usb the transport can initiate connection establishment in any direction either from device to host or vise versa starting the vm proxy on the desktop to use the vm proxy extract the files from your copy of the oracle java me embedded zip archive on the windows desktop the vm proxy program is found as a jar file inside the util directory of the oracle java me embedded distribution named proxyjar you can start the vm proxy on the desktop host computer either in a server or a client mode as described below server mode connection the server mode is used by default in this mode the vm proxy must be started after the java runtime is started on the embedded board then do the following change to the util directory on your desktop host and enter the following command you should see an output similar to the following c\mydir\util> java jar proxyjar socket <raspberry pi ip address> channel closed > available trying to open socket connection with device <ip address> connected to the socket socketaddr=<ip address> port localport= debugger connection initialized client mode connection to switch to a client mode connection perform the following steps starting the vm proxy on the desktop developer’s guide edit the jwcpropertiesini file on the embedded board as follows • set the proxyconnectionmode property to the client value • set the proxyclientconnectionaddress property to the ip address of the host running the developer agent start the java runtime on the embedded board change to the lib directory on your desktop host and enter the following command you should see an output similar to the following c\mydir\util> java jar proxyjar starting with default parameters serversocketport jdbport channel closed > available waiting for device connections on port by default the proxy listens for cli connections at port on the host the port can be changed by passing the cliport option while launching the proxy vm proxy options the following options are available when starting the vm proxy using the java jar proxyjar command no options runs proxy with default transport the host opens a server socket and waits for a connection from the embedded device this means the java embedded runtime should be started on the device with its jwcpropertiesini file containing the following settings proxyconnectionmode=client proxyclientconncetionaddress=ip address of vm proxy socket <ipaddress> runs the proxy as a client this means that the device should open a server socket and wait for a connection from the host the java embedded runtime should be started on the device with its jwcpropertiesini file containing the following setting proxyconnectionmode=server serial <comport> – runs the proxy with a serial transport this means that the vm proxy communicates with device across the specified serial port debug – adds additional debugging information when the vm proxy is running i – runs cli in the command shell proxy in interactive mode cliacceptanyhost – accepts connections to cli from any host by default only localhost connections are accepted proxyhost <host address>– specifies the http proxy address for outbound ip connections from the proxy proxyport <proxy port> – specifies the http proxy port for outbound ip connections from the proxy use the help proxy option to preview the list of the available options vm proxy options java embedded vm proxy and console using the command line interface once the vm proxy is running on the desktop you can use the ams cli the easiest way to do this is to start a putty executable on your desktop computer and connect to localhost at port this is shown in figure see the appropriate getting started guide for your embedded board for platformspecific information on using the command line interface figure putty configuration the window from port provides a commandline interface cli and is shown in figure using the command line interface developer’s guide figure commandline interface warning the commandline interface cli feature in this oracle java me embedded software release is provided only as a concept for your reference it uses insecure connections with no encryption authentication or authorization the following cli commands are available for developers when a command is only available for a specific embedded platform it is shown in the description amsinstall installs imlets on the embedded device usage amsinstall <url> auth=<username><password> hostdownload parameters this command takes the following parameters parameter description <url> specifies the jadjar location the url may contain credentials to access the jadjar server eg httpusernamepassword@host hostdownload downloads the jar file using http and then installs it to device via the tooling channel applicable for jar files only auth specifies the user credentials to access the jadjar server using the command line interface java embedded vm proxy and console responses this command may return the following responses response description <<amsinstallstart install <url> information message about the start of the installation process <<amsinstall install status stage <stage> %percentage% information message about the installation progress <<amsinstall okinstall success information message about the installation completing <<amsinstallfailmissing parameters see help the url is not specified <<amsinstallerrorunknown parameter '<dummy parameter' see help an unexpected parameter was found one or more parameters were found two or more times <<amsinstallfailcredentials must be specified once in url or in auth parameter credential info specified twice in <url> and in <auth> parameter <<amsinstallfailcan't download jar data from <url> an error occurred while downloading the jar in hostdownload mode <<amsinstallfailerrorcode errorcode errormessage message installation was aborted for some reason described in error message <<amsinstallfail error occurred exception an unexpected error occurred note that this response is added for debugging purposes and to avoid confusion amslist shows a list of installed imlets on the device or in the specified suite if no arguments are specified the amslist command will return a list of all installed suites if a suite's index or namevendor combination are used the command will list the suite's midlets usage amslist <index> or <name><vendor> parameters this command takes the following parameters parameter description <index> specifies the suite via its index number using the command line interface developer’s guide parameter description <name><vendor> specified the suite via its name and vendor responses this command may return the following responses response description <<amslistfailinvalid parameters unexpected parameters were found <<amslistok suites are installed no suites were found on the device <<amslistnamevendorstatus <<amslistnnamevendorstatus <<amslistokn suites are installed list of installed suites with details <<amslistfailinvalid parameter parsing the suite's index failed or the character was missed <<amslistfailnot found the suite was not found <<amslistmidletstatus <<amslistnmidletstatus <<amslistokn midlets are installed in suitenamesuitevendor list of the installed midlets in the suite note that each suite status can be running or stopped amsinfo displays information regarding the specified suite usage amsinfo <index> parameters this command takes the following parameters parameter description <index> specifies the suite via its index number responses this command may return the following responses response description <<amsinfofailmissing parameters see help number of the specified parameters is less or more than using the command line interface java embedded vm proxy and console response description <<amsinfofailconnection is closed connection to the device is closed <<amsinfofailnot found the suite is not found or removed during command execution <<amsinfosize=<size> <<amsinfoversion=<version> <<amsinfoname=<name> <<amsinfovendor=<vendor> <<amsinfourl=<url> <<amsinfomidlet=<midlet> <<amsinfooksuccess getting info list of suitespecific information amsupdate updates the specified suite usage amsupdate <index> or <namevendor> auth=<username><password> parameters this command takes the following parameters parameter description <index> the index of the suite to be updated to obtain the suite index use the amslist command <name><vendor> specifies the suite to be updated via its name and vendor auth specifies the user credentials to access the jadjar server note the suite's <index> or <namevendor> combination is mandatory and must be placed first responses this command may return the following responses response description <<amsupdatefailmissing parameters see help missing parameters the suite's index or namevendor combination is not specified <<amsupdateerrorunknown parameter parameter see help an unexpected parameter was found <<amsupdateerrorduplicate parameter parameter see help a duplicate parameter was found using the command line interface developer’s guide response description <<amsupdateerrorcan't update suite suiteindex suitenamesuitevendor download url is not specified the download url is not specified for suites installed in hostdownload mode see the amsinstall command <<amsupdatefailnot found suite not found either the suite was removed or the index namevendor identifier was specified incorrectly <<amsupdatestart install <url> information message about the update process starting <<amsupdate install status stage stage percentage% information message about the update progress <<amsupdate okinstall success information message about the update process completing <<amsupdatefail errorcode errorcode errormessage message the update was aborted for some reason as described in the error message <<amsupdatefail error occurred exception an unexpected error occurred note that this response is added for debugging purposes and to avoid confusion amsremove removes the specified suite from device usage amsremove <index or namevendor> parameters this command takes the following parameters parameter description <index> the index of the suite to be removed to obtain the suite index use the amslist command <name><vendor> specifies the suite to be removed via its name and vendor responses this command may return the following responses using the command line interface java embedded vm proxy and console response description <<amsupdatefailmissing parameters see help missing parameters suite's index or namevendor not specified <<amsremoveokremoved the suite was successfully removed <<amsremovefailnot found the suite was not found either the suite has been already removed or the <index><namevendor> identifier was specified incorrectly <<amsremovefaillocked the suite is locked and cannot be removed the suite is likely in the running state the amsstop command must be called first <<amsremovefailnot allowed the user doesn't have permissions to remove suites amsrun run default suite's midlet or midlet specified wit miletid parameter usage amsrun <index or namevendor> <id> parameters this command takes the following parameters parameter description <index> index of suite to be run to obtain the suite index use the amslist command <name><vendor> specifies the suite to be launched via its name and vendor <id> the index of midlet in the suite to be run responses this command may return the following responses response description <<amsrunfailinvalid parameters unexpected parameters were found <<amsrunfailfailed to start cannot start the midlet the index of the suite or midlet was specified incorrectly using the command line interface developer’s guide response description <<amsrunfailalready started the suite has been already started <<amsrunokstarted the suite was started successfully amsstop stops the default midlet or the midlet with the specified id if given usage amsstop <index or namevendor> id parameters this command takes the following parameters parameter description <index> index of suite to be stopped to obtain the suite index use the amslist command <name><vendor> specified the suite to be stopped via its name and vendor <id> the id of midlet in the suite to be stopped responses this command may return the following responses response description <<amsstopfailinvalid parameters unexpected parameters were found <<amsstopfailnot found cannot stop the midlet the index of the suite or midlet was specified incorrectly <<amsstopokstarted the suite was stopped successfully blacklist blacklists clients and applications usage blacklist client <name> blacklist app <namevendor> parameters this command takes the following parameters using the command line interface java embedded vm proxy and console parameter description <name> the name of the client to be blacklist <name><vendor> specifies the suite to be blacklisted via its name and vendor responses this command may return the following responses response description <<blacklistfailinvalid parameters unexpected parameters were found <<blacklist status ok the command was successful propertieslist shows the list of names of properties which control java me runtime common to the javapropertiesini file note that a property type may be only int string or bool the readwrite flag value may be only readwrite or read only and a bool property value may be only true or false usage propertieslist l parameters this command takes the following parameters parameter description l use the long listing format with properties' types values and readonly flags responses this command may return the following responses response description <<propertieslistamsmemorylimitmvm amsmemoryreservedmvm authenticationname authenticationpwd btgoep btlcap btspp cbs the response without the long listing flag shows property names separated by a space using the command line interface developer’s guide response description <<propertieslistok readwrite int amsmemorylimitmvm = readwrite int amsmemoryreservedmvm = readwrite string authenticationname = user readwrite string authenticationpwd = password read only bool microeditiondeviceidisunique = false read only bool microeditiondevicevendorisunique = false the response with the long listing flag <<propertieslistfailinvalid parameters <<propertieslistusage propertieslist l <<propertieslistlist of properties which control java me runtime <<propertieslist l use a long listing format an unexpected parameter was found <<propertieslistokthere is no property found an empty list of properties was found <<propertieslistfailconnection is closed an ioexception has occurred getproperty shows the value of requested property if the property is not defined the command shows an empty string as its value usage getproperty <name> i parameters this command takes the following parameters parameter description name the property name i displays additional property information responses this command may return the following responses response description <<getpropertyokdiocounter = true the property was found without displaying additional information using the command line interface java embedded vm proxy and console response description <<getpropertyokdummyproperty = the property value is empty or not a set without additional information <<getpropertyok readonly bool diocounter = true the property is found with i flag <<getpropertyok readwrite string dummyproperty = the property value is empty or not a set with i flag <<getpropertyfailillegal argument ipnetmask <<getpropertyusage getproperty name i <<getpropertyshows value of string property 'name' <<getproperty i display property info an unexpected parameter was found the wrong flag format was usedeg using info instead of i <<getpropertyfailconnection is closed an ioexception has occurred <<getpropertyoklcnetwork = => the property was modified with the setproperty command the new value will be effective after you restart the device setproperty sets the new value for the requested property if the property controls the java me runtime ie it is defined in the javapropertiesini file it cannot be rewritten unless the readonly flag is disabled note that properties are verified for type correctness the value of a bool property may be any string however only true case insensitive is considered a true value; any other string is considered to be false the new value for a property that controls the java me runtime will be applied only after a vm reboot in this case only the latest setproperty command will have an effect after reboot new values for other properties can be read just after the getproperty command has finished usage setproperty <name> <value> parameters this command takes the following parameters parameter description <name> the name of the requested property <value> the new value for the property responses this command may return the following responses using the command line interface developer’s guide response description <<setpropertyokimc = newvalue the operation completed successfully <<setpropertyfailillegal number hello the value type is not a number when property type is int <<setpropertyfailillegal argument microeditiondevicevendorisunique or true the property is readonly <<setpropertyfailinvalid parameters wrong number of parameters <<setpropertyfailconnection is closed an ioexception has occurred when you modify a property by using the setproperty command and verify the change with the getproperty command the cli response contains both old and new values as shown in the following example the new value will be effective after you restart the device >>getproperty lcnetwork <<getpropertyoklcnetwork = >>setproperty lcnetwork <<setpropertyoklcnetwork = changes will take effect after device restart >>getproperty lcnetwork <<getpropertyoklcnetwork = => saveproperties saves properties to an internal storage usage saveproperties parameters this command takes no parameters responses this command may return the following responses response description <<savepropertiesoksuccess properties have been successfully saved to the internal storage <<savepropertiesfail an ioexception has occurred using the command line interface java embedded vm proxy and console netinfo show the network information of the system this command only works on qualcomm ioe devices usage netinfo parameters this command takes no parameters responses this command may return the following responses response description <<netinfooksuccess getting info shows network information in the format <name>=<value> <<netinfofail connection is closed an ioexception has occurred netset sets a new value for the requested property of the network system the property is verified for type correctness this command only works on qualcomm ioe devices usage netset <name> <value> parameters this command takes the following parameters parameter description <name> the name of the requested property <value> the new value for the property responses this command may return the following responses response description <<netsetok<name> = <value> the operation completed successfully using the command line interface developer’s guide response description <<netsetfailillegal first argument <name> <<netset ssid <ssid>set value for wifi access <<netset passwd <passwd>set password for wifi access <<netset pref <>set network mode preference auto no op wlan only gsmwcdma only wcdma only gsmwcdmawlan <<netset apn <apn>set apn <<netset pdpauthtype <>set apn's auth type none pap chap <<netset pdpusername <username>set pdp username <<netset pdppassword <password>set pdp password an illegal type of property was encountered the response dictates the correct syntax and property type <<netsetfailillegal value <value> the value type was not a number when the property type is int <<netsetfailillegal argument <name> or <value> this is returned if any of arguments are null or if the propertyname has an incorrect property type <<netsetfailconnection is closed an ioexception has occurred netreconnect reconnects the network and reboots java usage netreconnect parameters this command takes no parameters responses this command may return the following responses response description <<netreconnectokvm will reboot device will reconnect to the network the network reconnect command completed successfully the device will be rebooted and reconnected to the network <<netreconnectfail cannot reconnect the device to the network using the command line interface java embedded vm proxy and console response description <<netreconnectfail connection is closed an ioexception has occurred devicelist prints a list of all connected devices at the current time usage devicelist parameters this command takes no parameters responses this command may return the following responses response description < <<devicelist <ip><port>current<<devicelist <ip><port><<devicelist<n><ipn><portn><<devicelistokn devices are connected printed list of devices the current annotation indicates the currently seleted device that all devicerelated cli command are addressed to <<devicelistfailinvalid parameters unexpected parameters were found in this case the command has no parameters but the user has specified some devicechange switches the currentlyselected device once changed all further devicerelated commands will be address to the newly selected device usage devicechange <index> parameters this command takes the following parameters parameter description <index> an integer index of device as printed by the devicelist command responses this command may return the following responses using the command line interface developer’s guide response description <<devicechangeokcurrent device is changed the command has been processed successfully; the current device was changed <<devicechangefailinvalid parameters an invalid number of parameters have been specified either no parameters or more than one parameter <<devicechangefailincorrect device index the index is not an integer <<devicechangefaildevice not found there is no such device <<devicechangefailthe device is already current an attempt was made to switch to a device that is already the current device shutdown shutdown or restart the device usage shutdown r parameters this command takes the following parameters parameter description r restart the device note that restart is not supported on win platform responses this command may return the following responses response description <<shutdownokdevice will shutdown! the shutdown command was processed successfully the device will be shutdown soon <<shutdownokdevice will reboot! the shutdown command was processed successfully device will be restarted soon <<shutdownfailcan't reboot device cannot restart the device <<shutdownfailwrong parameters see help unexpected parameters were found using the command line interface java embedded vm proxy and console response description <<shutdownfail<error message> shutdown command failed due an unknown reason cd changes the working directory on the device usage cd <devicedirectoryname> parameters this command takes the following parameters parameter description <devicedirectoryname > this specifies the directory on the device to which you want to change the <devicedirectoryname> can be relative to the current working directory or an absolute path responses this command may return the following responses response description <<cdok the command completed successfully <<cdfailinvalid parameters missing or excess parameters were encountered <<cdfaildirectory not found <devicedirectoryname> incorrect <devicedirectoryname> specified <<cdfailconnection is closed an ioexception has occurred delete deletes file on the device usage delete <devicefilename> parameters this command takes the following parameters using the command line interface developer’s guide parameter description <devicefilename> specifies the file to delete <devicefilename> can be relative to the current working directory or an absolute path responses this command may return the following responses response description <<deleteok the command completed successfully <<deletefailinvalid parameters missing or excess parameters were encountered <<deletefailfile not found <devicefilename> incorrect <devicefilename> specified <<deletefailconnection is closed an ioexception has occurred get copies a device file to the host usage get <devicefilename> <hostfilename> parameters this command takes the following parameters parameter description <devicefilename> specifies the file to copy <devicefilename> can be relative to the current working directory or an absolute path <hostfilename> specifies the name of the file to use on the host responses this command may return the following responses response description <<getok the command completed successfully <<getfailinvalid parameters missing or excess parameters were encountered <<getfailfile not found <devicefilename> incorrect <devicefilename> specified using the command line interface java embedded vm proxy and console response description <<getfailunable to write into file <hostfilename> incorrect <hostfilename> specified <<getfailconnection is closed an ioexception has occurred ls displays a list of files and subdirectories in a device directory usage ls <devicedirectoryname> parameters this command takes the following parameters parameter description <devicedirectoryname > specifies the directory for which you want to see a listing <devicedirectoryname> can be relative to the current working directory or an absolute path if no directory is specified the current working directory on the device is used in the result listing subdirectories are marked by a trailing device file separator symbol for example \ on windows on rpi responses this command may return the following responses response description <<lsok alljavalisttxt allclasseszip appdb\ bin\ classes\ classeszip the command completed successfully <<lsfailinvalid parameters excess or invalid parameters were encountered <<lsfaildirectory not found <devicedirectoryname> incorrect <devicedirectoryname> specified mkdir creates a directory on the device using the command line interface developer’s guide usage mkdir <devicedirectoryname> parameters this command takes the following parameters parameter description <devicedirectoryname > specifies the name of the new device directory <devicedirectoryname> can be relative to the current working directory or an absolute path responses this command may return the following responses response description <<mkdirok the command completed successfully <<mkdirfailinvalid parameters missing or excess parameters were encountered <<mkdirfaildirectory not found <devicedirectoryname> incorrect <devicedirectoryname> was specified <<mkdirfailconnection is closed an ioexception has occurred rmdir deletes an empty directory on the device usage rmdir <devicedirectoryname> parameters this command takes the following parameters parameter description <devicedirectoryname > specifies the name of the device directory to delete <devicedirectoryname> can be relative to the current working directory or an absolute path responses this command may return the following responses response description <<mkdirok the command completed successfully using the command line interface java embedded vm proxy and console response description <<rmdirfailinvalid parameters> missing or excess parameters were encountered <<rmdirfaildirectory not found <devicedirectoryname> incorrect <devicedirectoryname> was specified <<rmdirfailunable to delete directory <devicedirectoryname> unable to delete the directory for example the directory or a file in it is used by another application or the directory is not empty pwd prints the current working directory on the device usage pwd responses this command may return the following responses response description <<pwdok c\users\abc\javamesdk\ea\work \embeddeddevice\appdb the command processed successfully <<pwdfailinvalid parameters excess parameters were encountered put copies a local host file to the device usage put <hostfilename> <devicefilename> parameters this command takes the following parameters parameter description <hostfilename> specifies the local host file to copy <devicefilename> specifies the name to use on the device <devicefilename> can be relative to the current working directory or an absolute path responses this command may return the following responses using the command line interface developer’s guide response description <<putok the command processed successfully <<putfailinvalid parameters missing or excess parameters <<putfailunable to read file <hostfilename> incorrect <hostfilename> specified <<putfailfile not found <devicefilename> incorrect <devicefilename> specified <<putfailconnection is closed an ioexception has occurred exit terminates the current cli session the cli server continues to run and the user can reconnect again usage exit parameters the command has no parameters responses the command returns no response; the terminal application closes ksdelete deletes a key from the me device keystore identified either by its owner or the key number usage ksdelete owner <ownername> number <keynumber> client <name> proxy parameters this command takes the following parameters parameter description <ownername> the name of the owner of an me key <keynumber> the key number starting at of an me key currently in the device keystore <name> the name of the target security client proxy drop the proxy connection security in the next session using the command line interface java embedded vm proxy and console responses this command may return the following responses response description <<ksdeleteok the command processed successfully <<ksdeletefailbad command or missing parameters type help for assistance an error occurred either with the command itself or one of the parameters ksexport exports a key from the device keystore identified by its index usage ksexport number <keynumber> out <filename> client <name> parameters this command takes the following parameters parameter description <keynumber> the key number starting at of an me key currently in the device keystore <filename> the complete filename to save the exported key as <name> the name of the target security client responses this command may return the following responses response description <<ksexportok the command processed successfully <<ksexportfailbad command or missing parameters type help for assistance an error occurred either with the command itself or one of the parameters ksimport imports a public key from a jce keystore or a key file into a me device keystore usage ksimport keystore <filename> storepass <storepass> keypass <keypass> alias <keyalias> client <clientname> proxy parameters this command takes the following parameters using the command line interface developer’s guide parameter description <filename> the complete filename of the jce keystore or the key file the keystore file may be in the following formats jks pkcspemder <storepass> the password for the jca keystore this parameter is not required when the source file is in the pem or der format <keypass> the password for the private key in a jca or pkcs keystore this parameter is not required if the command is importing only a public certificate <keyalias> the short string id of a key in a jca keystore this parameter is not required when the source file is in the pem or der format <clientname> the name of the security domain client if specified the certificate will be added to the indicated client only proxy enforces the proxy connection security tls with the given certificate starting from the next session responses this command may return the following responses response description <<ksimportok the command processed successfully <<ksimportfailbad command or missing parameters type help for assistance an error occurred either with the command itself or one of the parameters kslist lists the owner and validity period of each key in the me device keystore usage kslist proxy client <name> parameters this command takes the following parameters parameter description <name> the name of the target security client proxy displays the certificates installed for securing the proxy connection using the command line interface java embedded vm proxy and console responses this command may return the following responses response description <<kslist <number>=owner<owner distinguished name> valid from <date> to <date> a list of each of the installed keys following this format ksclients presents a list of all the security clients defined in the system that can accept public keys usage ksclients responses this command may return the following responses response description <<kslist <number>=<client name> a list of each of the clients following this format dumpheap dumps java heap of the connected device usage dumpheap gc parameters this command takes the following parameters parameter description gc forces full garbage collector gc on the device prior the dump using the command line interface developer’s guide security this chapter discusses security with the oracle java me embedded environment note that with version of the ojmee the security system was changed considerably and now uses java sestyle finegrain permissions in addition a security policy must be chosen and jar files if applicable must be digitally signed in order for peripherals to be accessed overview of oracle java me embedded permissions applications that require access to peripherals or resources must request appropriate permissions in the jad file for more information on using the device io apis please see the device io api specification and the associated javadocs at the following site httpdocsoraclecomjavame table gives a list of all permissions that can be requested in the oracle java me embedded environment as well as a description of when they are applicable table oracle java me embedded permissions permission description comoraclecryptokeystorekeystorepermi ssion allows access to the keystore comoraclessldtlsserverpermission allows access to a dtls server comoracleruntimeupdateruntimeupdatep ermission allows remote update of the java me embedded runtime javaiofilepermission accessing files javalangruntimepermission accessing runtime properties javautilloggingloggingpermission use of log files javautilpropertypermission accessing system properties javaxmicroeditionapduapdupermission access to smartcards using the apdu protocol javaxmicroeditioncellularcellularperm ission use of cellular telephone functionality on a board javaxmicroeditioneventeventpermission reading and posting systemlevel events javaxmicroeditionioaccesspointpermiss ion use of access points for network connections security table cont oracle java me embedded permissions permission description javaxmicroeditioniocommprotocolpermis sion use of the comm serial port protocol javaxmicroeditionioconnectorcbs use of a cell broadcast service cbs connector javaxmicroeditionioconnectorfilerea d use of a file read connector javaxmicroeditionioconnectorfilewri te use of a file write connector javaxmicroeditionioconnectorrtsp use of a realtime streaming protocol rtsp connector javaxmicroeditionioconnectorsms use of an sms connector javaxmicroeditioniodatagramprotocolpe rmission use of the datagram protocol javaxmicroeditioniodtlsprotocolpermis sion use of the datagram transport layer security dtls protocol javaxmicroeditioniofileprotocolpermis sion use of a file protocol javaxmicroeditioniohttpprotocolpermis sion use of the http protocol javaxmicroeditioniohttpsprotocolpermi ssion use of the https protocol javaxmicroeditionioimcprotocolpermiss ion use of the intermidlet communication protocol javaxmicroeditioniomulticastprotocolp ermission use of a multicast protocol javaxmicroeditioniopushregistrypermis sion use of a push registry javaxmicroeditioniosocketprotocolperm ission use of a socket protocol javaxmicroeditioniosslprotocolpermiss ion use of the secure sockets layer ssl protocol javaxmicroeditionlocationlocationperm ission obtain the current location javaxmicroeditionmediacontrolrecordc ontrol use of a recording feature on the device javaxmicroeditionmediacontrolvideoco ntrolgetsnapshot use of a video snapshot feature on the device overview of oracle java me embedded permissions developer’s guide table cont oracle java me embedded permissions permission description javaxmicroeditionmidletautostartpermi ssion a permission to autostart an imlet suite on a device javaxmicroeditionpowerpowerstatepermi ssion access the current power state of the device javaxmicroeditionswmswmpermission access the software management features of the java me embedded runtime javaxwirelessmessagingcbsreceive receive a cell broadcast service cbs message javaxwirelessmessagingsmsreceive receive an sms message javaxwirelessmessagingsmssend send an sms message jdkdioadcadcpermission use of analogtodigital converter adc jdkdioatcmdatpermission use of at communication line jdkdiocountercounterpermission use of the hardware counter jdkdiodacdacpermission use of digitaltoanalog converter dac jdkdiodevicemgmtpermission opening of any device io peripheral jdkdiogenericgenericpermission use of generic device io connections jdkdiogpiogpiopinpermission use of a general purpose io gpio pin jdkdiogpiogpioportpermission use of a general purpose io gpio port jdkdioicbusicpermission use of the ic bus on the board jdkdiommiommiopermission use of the memorymapped io mmio capabilities on the board jdkdiopwmpwmpermission use of the pulse width modulation pwm capabilities on the board jdkdiospibusspipermission use of the spi bus on the board jdkdiouartuartpermission use of the uart bus on the board jdkdiowatchdogwatchdogtimerpermission use of the watchdog timer on the board overview of oracle java me embedded permissions security accessing peripherals applications that require access to device io apis must request appropriate permissions in jad files for more information on using the device io apis please see the device io api specification and the associated javadocs at the following site httpdocsoraclecomjavame signing the application with api permissions first the jad file must have the proper api permissions here is how to sign the application both in netbeans and without an ide • in netbeans rightclick the project name and choose properties select application descriptor then in the resulting pane select api permissions click the add button and add the appropriate permissions as shown in figure click ok to close the project properties dialog figure adding permissions using the netbeans ide • if you are not using an ide you can manually modify the application descriptor file to contain the following permissions midletpermission comoraclediodevicemgmtpermission ** open method # signing application using the netbeans ide the netbeans ide enables developers both to sign the applications with a local certificate and upload the certificate on the device see the appropriate getting started guide for your embedded platform to learn how to use the netbeans ide to sign your application accessing peripherals developer’s guide method # signing application using a command line signing applications using a command line is the preferred route for applications that are widely distributed here are the instructions on how to setup a keystore with a local certificate that can be used to sign the applications generate a new selfsigned certificate with the following command on the desktop using the keytool that is shipped with the oracle java se jdk keytool genkey v alias mycert keystore mykeystoreks storepass spass keypass kpass validity keyalg rsa keysize dname cn=thehost this command generates a bit rsa key pair and a selfsigned certificate placing them in a new keystore with a keystore password of spass and a key password of kpass that is valid for days you can change both passwords as desired copy the certs directory from the board over to the desktop using an sftp client or scp command change into the certs directory and perform the following command using the mekeytoolexe command or alternatively java jar mekeytooljar if your distribution contains only that that ships with the oracle java me sdk distribution mekeytool import mekeystore mainks keystore mykeystoreks storepass spass alias mycert domain trusted this command imports the information in mykeystoreks that you just created to the mainks keystore after this is completed copy the certs directory back to the board by using an sftp client or scp command use the following commands to sign your application before deploying it to the board jadtool addcert chainnum alias myalias keystore mykeystoreks storepass spass inputkad myjadjad outputjad myjadjad to sign with the sha signature algorithm add the usesha parameter if not present the default algorithm shawithrsa is used jadtool addjarsig chainnum jarfile myjarjar alias myalias keystore mykeystoreks storepass spass keypass kpass inputjad myjadjad outputjad myjadjad usesha method # using nullauthenticationprovider this method allows to bypass a certificate check and execute unsigned applications as if they were signed and given all requested permissions this method should be used only for development and debugging final testing must be done using a real certificate as described in method # to use nullauthenticationprovider set the following property in the jwcpropertiesini file on the board internal authenticationprovider = comoraclemeepsecuritynullauthenticationprovider note that the java runtime must not be running when editing the jwcpropertiesini file accessing peripherals security cldc permissions the following permissions are available that affect the use of portions of the cldc libraries filepermission the javaiofilepermission controls access to a file or directory a filepermission consists of a pathname and a set of actions that are valid for the resource specified by that pathname resource name the resource name is simply the pathname of the file or directory granted the specified actions a pathname that ends in * where is the file separator character fileseparatorchar indicates all the files and directories contained in that directory a pathname that ends with indicates all files and all recursive subdirectories contained in that directory a pathname consisting of the special token <<all files>> matches any file note a pathname need not have a leading a pathname consisting of a single * indicates all the files in the current directory while a pathname consisting of a single indicates all the files in the current directory and recursively all files and subdirectories contained in the current directory actions table shows the actions can be requested with this permission as a list of commaseparated keywords table filepermission actions value meaning read read permission write write permission execute execute permission delete permission to delete the resource readlink read a link permission this is retained for se compatibility but is not currently used runtimepermission the javalangruntimepermission represents runtime permissions a runtimepermission contains a resource name but no actions list resource name the resource name is the name of the runtime permission the naming convention follows the hierarchical property naming convention also an asterisk may appear at cldc permissions developer’s guide the end of the name following a or by itself to signify a wildcard match for example loadlibrary* and * signify a wildcard match while *loadlibrary and a*b do not table shows the possible runtime permissions that are allowed as well as their effects and possible risks of using them table runtimepermission actions value effect risks exitvmexit status halting of the java virtual machine jvm with the specified exit status this allows an attacker to mount a denialofservice attack by automatically forcing the virtual machine to halt note that the exitvm* permission is automatically granted to all code loaded from the application class path thus enabling applications to terminate themselves also the exitvm permission is equivalent to exitvm* setsecuritymanager setting of the security manager possibly replacing an existing security manager the security manager is a class that allows applications to implement a security policy granting the setsecuritymanager permission would allow code to change which security manager is used by installing a different possibly less restrictive security manager thereby bypassing checks that would have been enforced by the original security manager createsecuritymana ger creation of a new security manager this gives code access to protected sensitive methods that may disclose information about other classes or the execution stack setio setting of systemout and systemerr this allows changing the value of the standard system streams an attacker may set systemerr to a null outputstream which would hide any error messages sent to systemerr modifythread modification of threads possibly via calls to perform thread interrupts or setpriority and setname methods this allows an attacker to modify the behavior of any thread in the system cldc permissions security loggingpermission the javautilloggingloggingpermission is a permission which the security manager will check when code that is running with a security manager calls one of the logging control methods such as loggersetlevel currently there is only one overarching loggingpermission without resources or actions this permission simply grants the ability to control the logging configuration for example by adding or removing handlers by adding or removing filters or by changing logging levels propertypermission the javautilpropertypermission is for general java property permissions resource name the resource name is the name of the property for example javahome or osname the naming convention follows the hierarchical property naming convention also an asterisk may appear at the end of the name following a or by itself to signify a wildcard match for example java* and * signify a wildcard match while *java and a*b do not actions table shows the actions can be requested with this permission as a list of commaseparated keywords table propertypermission actions value meaning read read permission write write permission care should be taken before granting code permission to access certain system properties for example granting permission to access the javahome system property gives potentially malevolent code sensitive information about the system environment such as the java installation directory also granting permission to access the username and userhome system properties gives potentially malevolent code sensitive information about the user environment including the user's account name and home directory keystore permissions the following permissions are available that allow access to the java me keystore keystorepermission the comoraclecryptokeystorekeystorepermission controls the type of access allowed to the key store resource name table shows the resource names that can be requested with this permission keystore permissions developer’s guide table keystorepermission resource names value meaning clientonly access to client certificates only * access to the entire certificate storage device io permissions the following are among the more common permissions that can be requested from most oracle java me embedded devices depending on whether the functionality is supported by the underlying board see the getting started guide for your embedded board to determine which device io permissions and resources are available for use adcpermission the jdkdioadcadcpermission class defines permissions for analogtodigital channel access on an embedded board resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for adc control actions table shows the actions can be requested with this permission table adcpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of a device atpermission the jdkdioatcmdatpermission class defines permissions at device access resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channels are available for at control actions table shows the actions can be requested with an atpermission table atpermission actions value meaning open open at functions device io permissions security table cont atpermission actions value meaning data open data connections powermanage manage the power saving mode of a device counterpermission the jdkdiocountercounterpermission class defines permissions for pulse counter access resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channels are available for pulse counter control actions table shows the actions can be requested with an atpermission table counterpermission actions value meaning open open and access pulse counter functions powermanage manage the power saving mode of a device dacpermission the jdkdiodacdacpermission class defines permissions for digitaltoanalog channel access on an embedded board resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for dac control actions table shows the actions can be requested with this permission table dacpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of a device device io permissions developer’s guide devicemgmtpermission the jdkdiodevicemgmtpermission class defines permissions for registering and unregistering devices as well as opening devices using their registered configurations resource name the resource name is a combination of a device name and of a device id or range of device ids it takes the following form devicenamespec deviceidspec devicenamespec the devicenamespec string takes the following form devicename *  the devicename string is a device name that is returned by a call to devicedescriptorgetname a devicenamespec specification consisting of the asterisk * matches all device names a devicenamespec specification consisting of the empty string designates an undefined device name that may only be matched by an empty string or an asterisk deviceidspec the deviceidspec string takes the following form deviceid deviceid deviceiddeviceid * the deviceid string is a device id that is returned by a call to devicedescriptorgetid note that the characters in the string must all be decimal digits a deviceidspec specification of the form n where n is a device id signifies all device ids numbered n and above while a specification of the form n indicates all device ids numbered n and below a single asterisk in the place of the deviceidspec field matches all device ids the name ** matches all device names and all device ids as is the name * actions table shows the actions can be requested with this permission table devicemgmtpermission actions value meaning open open a device using its device name or id register register a new device unregister unregister a new device genericpermission the jdkdiogenericgenericpermission class defines permissions for generic device access on an embedded board device io permissions security resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for generic devices actions table shows the actions can be requested with this permission table genericpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of a generic device gpiopinpermission the jdkdiogpiogpiopinpermission class defines permissions for general purpose io gpio pin access on an embedded board resource name the resource name is a numerical pin number refer to the getting started guide of your embedded board to determine which pin numbers are available for gpio control actions table shows the actions can be requested with this permission table gpiopinpermission actions value meaning open the requested channel is opened and available for use setdirection request permission to change the gpio pin direction powermanage manage the power saving mode of a gpio pin gpioportpermission the jdkdiogpiogpioportpermission class defines permissions for general purpose io gpio port access on an embedded board a gpio port is made up of several typically eight gpio pins resource name the resource name is a numerical port number refer to the getting started guide of your embedded board to determine which port numbers are available for gpio control actions table shows the actions can be requested with this permission device io permissions developer’s guide table gpioportpermission actions value meaning open the requested channel is opened and available for use setdirection request permission to change the gpio port direction powermanage manage the power saving mode of a gpio port icpermission the jdkdioicbusicpermission class defines permissions for ic bus access on an embedded board resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for ic control actions table shows the actions can be requested with this permission table icpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of an ic bus mmiopermission the jdkdiommiommiopermission class defines permissions for mmio bus access on an embedded board resource name the resource name is a memoryaddress in hexadecimal format returned by a call to mmiodeviceconfiggetaddress the characters in the string must all be hexadecimal digits refer to the getting started guide of your embedded board to determine which addresses are available for mmio use actions table shows the actions can be requested with this permission table mmiopermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of an mmio bus device io permissions security pwmpermission the jdkdiopwmpwmpermission class defines permissions for pulse width modulation pwm channel access on an embedded board resource name the resource name is a numerical channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for pwm control actions table shows the actions can be requested with this permission table pwmpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of a device spipermission the jdkdiospibusspipermission class defines permissions for spi bus access on an embedded board resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for spi control actions table shows the actions can be requested with this permission table spipermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of an spi bus uartpermission the jdkdiouartuartpermission class defines permissions for uart bus access on an embedded board resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel numbers are available for uart control device io permissions developer’s guide actions table shows the actions can be requested with this permission table uartpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of an uart bus watchdogtimerpermission the jdkdiowatchdogwatchdogtimerpermission class defines permissions for the watchdog timer on an embedded board resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available for the watchdog timer actions table shows the actions can be requested with this permission table watchdogtimerpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of the watchdog timer smart cards the following permission allows access to smart cards on java me embedded devices apdupermission the javaxmicroeditionapduapdupermission class represents access to a smart card using the apdu protocol an apdupermission contains a resource name also called a target name but no actions list the target name is the symbolic name of the apdupermission resource name the resource name can be one of two items as shown in table table apdupermission target names target name permission allows aid the ability to communicate with a smart card application identified by an aid target smart cards security table cont apdupermission target names target name permission allows sat the ability to communicate with a usat application on channel cellular the following permissions deal with embedded devices that can connect to a cellular network cellularpermission the javaxmicroeditioncellularcellularpermission class defines permissions for cellular network resources on an embedded board it consists only of a resource name resource name the resource name can be one of three items as shown in table table cellularpermission resource names resource meaning subscriber resources that access or modify the cellular subscriber identity which is often recorded on a sim ruim or csim network resources that access the cellular network * all available cellular resources generic events the following permissions deal with generic events that can be sent from the underlying runtime operating system to the oracle java me embedded runtime eventpermission the javaxmicroeditioneventeventpermission class defines permissions that allow applications to receive events from the underlying runtime operating system resource name the resource name is the name of the event such as batterylevel or commycompanymyevent the naming convention follows a hierarchical property naming convention also an asterisk may appear at the end of the name following a or by itself to signify a wildcard match for example commycompany* or * is valid while *mycompany or a*b is not valid cellular developer’s guide actions the actions to be granted are a list of commaseparated keywords the possible keywords are post postsystem read and register table gives more details on these keywords table eventpermission actions value meaning post permission to post an event postsystem permission to post a system event to see which system events are supported call eventmanagergetsystemeventnames read permission to read an event readregister permission to register and unregister applications to launch in response to events comm protocol the following permissions deal with embedded devices that can use a comm protocol through a serial port commprotocolpermission the javaxmicroeditioniocommprotocolpermission class defines permissions for comm resources on an embedded board it consists only of a resource name resource name the resource name is a base connection string and is typically formatted as comm<port identifier><optional parameters> an exact bnf grammar for the comm protocol uri is given in table table cellularpermission resource names resource meaning base connection string comm<portid><optionslist> comm<wildcardedportid> <portid> a nonempty casesensitive string of alphanumeric characters <wildcardedportid> all available cellular resources <optionslist> *<baudratestring> <bitsperchar> <stopbits> <parity> <blocking> <autocts> <autorts> <baudratestring> ;baudrate=<baudrate> <baudrate> nonempty string of digits <bitsperchar> ;bitsperchar=<bitvalue> comm protocol security table cont cellularpermission resource names resource meaning <bitvalue>  <stopbits> ;stopbits=<stopvalue> <stopvalue>  <parity> ;parity=<parityvalue> <parityvalue> even odd none <blocking> ;blocking=<onoff> <autocts> ;autocts=<onoff> <autorts> ;autorts=<onoff> <onoff> on off connector the following permissions deal with those associated with the javaxmicroeditionioconnector class a factory class for creating new connection objects cbs the javaxmicroeditionioconnectorcbs defines permissions for cellular broadcast service resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available for the cbs actions table shows the actions can be requested with this permission table connector cbs actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of the cbs file read the javaxmicroeditionioconnectorfileread defines permissions for connections that read files connector developer’s guide resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available for reading files actions table shows the actions can be requested with this permission table connector file read actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of the file read file write the javaxmicroeditionioconnectorfilewrite defines permissions for connections that write files resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available actions table shows the actions can be requested with this permission table watchdogtimerpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of the file write rtsp the javaxmicroeditionioconnectorrtsp defines permissions for connections that use the realtime streaming protocol rtsp resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available actions table shows the actions can be requested with this permission table watchdogtimerpermission actions value meaning open the requested channel is opened and available for use connector security table cont watchdogtimerpermission actions value meaning powermanage manage the power saving mode of the rtsp sms the javaxmicroeditionioconnectorsms defines permissions for sms messaging resource name the resource name is a channel number refer to the getting started guide of your embedded board to determine which channel number is available for sms actions table shows the actions can be requested with this permission table watchdogtimerpermission actions value meaning open the requested channel is opened and available for use powermanage manage the power saving mode of the sms datagram protocol the following permissions deal with embedded devices that can use datagram protocols datagramprotocolpermission the javaxmicroeditioniodatagramprotocolpermission class represents access rights to connections via the datagram protocol a datagramprotocolpermission consists of a uri string but no actions the uri string specifies a connection for sending and receiving datagrams it takes the following general form datagramhostportspec datagramportspec the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral as specified by rfc an ipliteral requires an ipvaddress to bew surrounded with square brackets note that ipvfuture addresses from rfc are not currently supported the host field is omitted to indicate an inbound servermode connection servermode uris may also omit the portspec field to request a systemassigned port number in such a case the datagramprotocolpermission is normalized to the equivalent uri datagram if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of or more entire domain labels partial domain label matches are not permitted for example *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts in outbound clientmode connections datagram protocol developer’s guide the portspec string takes the following form portnumber portnumber portnumberportnumber * a portspec of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports therefore the uri datagram* matches servermode datagram connections to all ports and the uri datagram** matches clientmode datagram connections to all hosts on all ports dtlsprotocolpermission the javaxmicroeditioniodtlsprotocolpermission class represents access rights to connections that use the datagram transport layer security dtls protocol a dtlsprotocolpermission consists of a uri string but no actions listthe uri string specifies a connection for sending and receiving datagrams it takes the following general form dtlshostportspec the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral as specified by rfc an ipliteral requires an ipvaddress to be surrounded with square brackets note that ipvfuture addresses from rfc are not supported if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of or more entire domain labels partial domain label matches are not permitted for example *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts in outbound clientmode connections the portspec string takes the following form portnumber portnumber portnumberportnumber * a portspec of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports therefore the uri dtls** matches clientmode datagram connections to all hosts on all ports dtlsserverpermission the javaxmicroeditioniodtlsserverpermission class represents access rights to server connections via the the datagram transport layer security dtls protocol protocol a dtlsserverpermission consists of a uri string but no actions list the uri string specifies a connection for sending and receiving datagrams it takes the following general form dtlsportspec the exact syntax for the dtlssrverpermission uri is provided by this bnf the portspec string takes the following form portnumber portnumber portnumberportnumber * a portspec of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports therefore the uri dtls* matches securemode secure datagram connections to all ports datagram protocol security file protocol the following permissions deal with embedded devices that can use files fileprotocolpermission the javaxmicroeditioniofileprotocolpermission class represents access rights to connections via the file protocol a fileprotocolpermission consists of a uri string indicating a fullyqualified absolute pathname as well as a set of actions desired for that pathname resource name the uri string takes the following general form filehostabsolutepath fileabsolutepath the exact syntax is given by rfcs and in addition a pathname that ends in * matches all the files and directories contained in that directory a pathname that ends with recursively matches all files and subdirectories contained in that directory in addition to the syntax defined by rfc fileprotocolpermission must accept and normalize uris of the form fileabspath if host is omitted it is equivalent to using localhost also note that absolutepath follows the syntax defined for fpath in rfc actions table shows the actions can be requested with this permission note that multiple actions can be requested by separating keywords with commas table fileprotocolpermission actions value meaning read the file can be read from using the protocol write the file can be written to using the protocol hypertext transfer protocols the following permissions deal with embedded devices that can use http or https protocols httpprotocolpermission the javaxmicroeditioniohttpprotocolpermission class represents access rights to connections via the http protocol an httpprotocolpermission consists of a uri string but no actions list the uri string specifies a data resource accessible via http it takes the following general form httphostportspecpathname?query#fragment the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral as specified by rfc an ipliteral requires ipvaddress to be file protocol developer’s guide surrounded with square brackets ipvfuture addresses from rfc are not supported if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of one or more entire domain labels partial domain label matches are not permitted for example *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts the portspec string takes the following form portnumber portnumber portnumberportnumber * empty string a portspec specification of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports; therefore the uri http** matches http connections to all hosts on all ports if the portspec field is omitted default port is assumed httpsprotocolpermission the javaxmicroeditioniohttpsprotocolpermission class represents access rights to connections via the https protocol a httpsprotocolpermission consists of a uri string but no actions list the uri string specifies a data resource accessible via secure https it takes the following general form httphostportspecpathname?query#fragment the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral as specified by rfc an ipliteral requires ipvaddress to be surrounded with square brackets ipvfuture addresses from rfc are not supported if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of one or more entire domain labels partial domain label matches are not permitted for example *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts the portspec string takes the following form portnumber portnumber portnumberportnumber * empty string a portspec specification of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports; therefore the uri https** matches https connections to all hosts on all ports if the portspec field is omitted default port is assumed imc the following permissions deal with embedded devices that use the intermidlet communication imc protocol imcprotocolpermission the javaxmicroeditionioimcprotocolpermission class defines permissions for intermidlet communication on an embedded board imc uses a lowlevel asynchronous bidirectional stream connection for communication between applications the permission consists only of a resource name imc security resource name the resource name consists of a number of rules to create a base client connection string; these rules are shown in table table imcprotocolpermission resource name rules rule meaning base client connection string imc <application uid> * <server name> <server version> ; <application uid> <application suite vendor> <application suite name> <application suite version> <application suite vendor> the application suite vendor <application suite name> the application suite name <application suite version> formatted application suite version or wildcard character * <server name> imc server name following the class naming syntax <server version> the version of the imc server version backward compatibility is assumedversioning follows the format defined for the midletversion attribute note that in the first rule the wildcard * may be used instead of a specific <application uid> when opening an imc client connection when the wildcard character is used it allows the client to connect to any applications even those from different vendors if they all provide the same imc service and meet the authorization requirements however which application's imc server the client will be connected to is implementation specific multicast protocols the following permissions deal with embedded devices that use the multicast protocols multicastprotocolpermission the javaxmicroeditioniomulticastprotocolpermission class represents access rights to connections via the multicast protocol a multicastprotocolpermission consists of a uri string but no actions list the exact syntax for the multicastprotocolpermission uri is provided by rules shown in table table multicastprotocolpermission resource name rules rule meaning base multicast connection string <inboundconnection> <outboundconnection> <inboundconnection> multicast <portnumber>  <autojoin> <outboundconnection> multicast <host> <portnumber> multicast protocols developer’s guide table cont multicastprotocolpermission resource name rules rule meaning <multicastpermission> multicast<hostspec> <portspec> <host> <host name> <ipaddr> <ipaddr> ipv address '' ipv address '' <hostspec> <host> * <autojoin> ?join=<host> <portspec> <portnumber> <portrange> * <portnumber> numeric port number <portrange> <portnumber>  <portnumber> <portnumber> <portnumber> the value of the host field must be a symbolic hostname a literal ipv multicast address or a literal ipv address surrounded by square brackets as specified by rfc the hostspec may be * to allow connection to any multicast host group the hostspec field may also be omitted to indicate an inbound servermode connection servermode uris may also omit the <portspec> field to request a systemassigned port number in such a case the multicastprotocolpermission is normalized to the equivalent uri multicast the <portspec> string takes the following form portnumber portnumber portnumberportnumber * a <portspec> specification of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the <portspec> field matches all ports therefore the uri multicast<ipaddr> matches multicast a host group to all ports and the uri multicast** matches multicast connections to all host groups on all ports push protocols the following permissions deal with embedded devices that use push protocols pushregistrypermission the javaxmicroeditioniopushregistrypermission class is used to check the static and dynamic registration of push connections and for registration of an alarm the permission covers static registration via application attributes and dynamic registration via pushregistryregisterconnection and alarm registration with pushregistryregisteralarm for the purposes of push registration permission the uri must consist only of the scheme and delimiter as defined by rfc the scheme may contain the wildcard character * which allows registration of all schemes for alarm registration the uri is * and the action is alarm push registration and alarm push protocols security registration can be combined in a single permission for example the resource is file and the actions are staticdynamicalarm actions table shows the actions can be requested with this permission note that multiple actions can be requested by separating keywords with commas table pushregistrypermission actions value meaning static allows registration of a push connection in the packaging of the application suite dynamic allows registration of a push connection using pushregistryregisterconnection alarm allows registration of an alarm using pushregistryregisteralarm socket protocols the following permissions deal with embedded devices that can use http or https protocols socketprotocolpermission the javaxmicroeditioniosocketprotocolpermission class represents access rights to connections via the socket protocol a socketprotocolpermission consists of a uri string but no actions list the uri string specifies a socket stream connection it takes the following general form sockethostportspec socketportspec the exact syntax for the socketprotocolpermission uri is given by the grammar in table table socketprotocolpermission resource name rules rule meaning base socket connection string socket<inboundconnection> socket<outboundconnection> <inboundconnection> <porspec>  empty string <outboundconnection> <host> <portspec> <host> <host name> <ipaddr> <wildcarded dns> <ipaddr> ipv address '' ipv address '' <wildcardeddns> * *<domainlabel> * followed by zero or more internet domain labels separated by <domainlabel> internet domain label socket protocols developer’s guide table cont socketprotocolpermission resource name rules rule meaning <portspec> <portnumber> <portrange> * <portnumber> numeric port number <portrange> <portnumber>  <portnumber> <portnumber> <portnumber> the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral with an ipvaddress as specified by rfc an ipvaddress must be surrounded with square brackets note that ipvfuture addresses are not currently supported the host field may be omitted to indicate a servermode connection servermode uris may also omit the portspec field to indicate a systemassigned port number in such a case the socketprotocolpermission is normalized to the equivalent uri socket if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of one or more entire domain labels partial domain label matches are not permitted therefore *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts in clientmode connections; the portspec string takes the following form portnumber  portnumber portnumber portnumber * a portspec specification of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk may be used in place of the portspec field to indicate all ports therefore the uri socket* matches servermode socket connections to all ports and the uri socket** matches clientmode socket connections to all hosts on all ports note the syntax of urls accepted by connectoropen for sockets differs from the syntax for socketprotocolpermission in the socket protocol the delimiter must always be present even if there is no port number whereas the delimiter must not be present unless there is a port number in socketprotocolpermission sslprotocolpermission the javaxmicroeditioniosslprotocolpermission class represents access rights to connections that use the secure sockets layer ssl protocol a sslprotocolpermission consists of a uri string but no actions list the uri string specifies a secure socket stream connection it takes the following general form sslhostportspec sslportspec the exact syntax for the sslprotocolpermission uri is given in table socket protocols security table sslprotocolpermission resource name rules rule meaning base ssl connection string ssl<inboundconnection> ssl<outboundconnection> <inboundconnection> <portspec>  empty string <outboundconnection> <host> <portspec> <host> <host name> <ipaddr> <wildcarded dns> <ipaddr> ipv address '' ipv address '' <wildcardeddns> * *<domainlabel> * followed by zero or more internet domain labels separated by <domainlabel> internet domain label <portspec> <portnumber> <portrange> * <portnumber> numeric port number <portrange> <portnumber>  <portnumber> <portnumber> <portnumber> the value of the host field must be a symbolic hostname a literal ipv address or an ipliteral as specified by rfc an ipvaddress must be surrounded with square brackets note that ipvfuture addresses are not supported the host field is omitted to indicate a servermode connection servermode uris may also omit the portspec field to indicate a systemassigned port number in such a case the sslprotocolpermission is normalized to the equivalent uri ssl if the host string is a dns name an asterisk may appear in the leftmost position to indicate a match of one or more entire domain labels partial domain label matches are not permitted therefore *oraclecom is valid but *oraclecom is not an asterisk by itself matches all hosts the portspec string takes the following form portnumber portnumber portnumberportnumber * a portspec specification of the form n where n is a port number signifies all ports numbered n and above while a specification of the form n indicates all ports numbered n and below a single asterisk in the place of the portspec field matches all ports therefore the uri ssl* matches secure server connections to all ports and the uri ssl** matches secure connections to all hosts on all ports location the following permissions allow location functionality on an embedded device location developer’s guide locationpermission the javaxmicroeditionlocationpermission class is used to allow access to the location functionality of an embedded device this permission consists of only the class but no targets or actions media the following permissions deal with embedded devices that have the ability to record or playback media recordcontrol the javaxmicroeditionmediarecordcontrol class allows java me embedded applications to control audio recording on an embedded device this permission consists of only the class but no targets or actions videocontrol the javaxmicroeditionmediavideocontrolgetsnapshot permissions grants java me embedded applications the ability to take snapshot pictures on an embedded device this permission consists of only the class but no targets or actions autostart the following permissions allow autostart functionality on an embedded device autostartpermission the javaxmicroeditionmidletautostartpermission allows applications in an application suite to assume the autostart application behavior resource names table shows the names that are allowed with this permission table autostartpermission actions value meaning allowed autostart of the application is allowed not allowed autostart of the application is not allowed power the following permission allows applications to access the power state functionality of an embedded device powerstatepermission the javaxmicroeditionpowerpowerstatepermission allows calls to powermanagersetpowerstate method media security resource names table shows the names that are allowed with this permission table powerstatepermission actions value meaning set calls to setpowerstate false are allowed seturgent calls to setpowerstate true are allowed software management the following permissions allow applications to use of the software management swm apis on an embedded device swmpermission the javaxmicroeditionpowerswmpermission provides permission handling for swm api permissions an swmpermission object contains a resource and actions resource names table shows the resource names that are allowed with this permission table swmpermission resource names value meaning client permission to perform the listed actions only for applications assigned to the same client crossclient permission to perform the listed actions also for applications assigned to other clients usually this is a permission reserved for the root client granting this permissions to other clients should carefully considered to avoid security breaches actions the actions to be granted are a list of commaseparated keywords as shown in table as well as whether they are permitted on a trusted and nontrusted client table swmpermission actions name and action assigned to trusted client assigned to nontrusted client client managesuite permitted not permitted client installation permitted not permitted client managetask permitted not permitted crossclient managesuite permitted but not recommended not permitted software management developer’s guide table cont swmpermission actions name and action assigned to trusted client assigned to nontrusted client crossclient installation permitted but not recommended not permitted crossclient managetask permitted but not recommended not permitted runtime update the following permission allows to update the java me runtime on an embedded device remotely runtimeupdatepermission the runtimeupdatepermission allows calls to the runtimeupdatemanagersavenewruntimejavaioinputstream and runtimeupdatemanagerscheduleupdateafterreboot methods resource names shows the names that are allowed with this permission table runtimeupdatepermission names value meaning save calls to savenewruntime are allowed update calls to scheduleupdateafterreboot are allowed runtime update security runtime update developer’s guide software management this chapter introduces the software management swm apis of the java me embedded profile meep version these apis provided extended software management features for oracle java me embedded applications as given in the javaxmicroeditionswm package there are five interfaces and six classes in this package that can be used by applications to enhance software management in addition there are a number of enumerations that are present in the package; these are documented near the classes and methods that use them throughout this chapter suiteinstalllistener interface suiteinstalllistener is a subinterface that provides progress data for an installer that is downloading an app or a link the interface consists of two methods both of which are called at certain times during installation one is the installationdone method which provides only a single code the definitions of which can be found in the installererrorcode interface the other is the updatestatus method which identifies the current task as one of the suiteinstallstage constants that are shown in table and provides an integer percentage of completeness table suiteinstallstate name description done installation has completed downloadingbody install stage downloading application body downloadingdata install stage downloading additional application data downloadingdescriptor install stage downloading application descriptor storing install stage storing application verifying install stage verifying downloaded content here are the two method defined in the suiteinstalllistener interface • void installationdoneint errorcode this method is called by the installer to report that the installation has completed the resulting integer code is contained in the installererrorcode class see “installererrorcode” for more information about installation error codes • void updatestatussuitemanagementtracker tracker suiteinstallstage status int percent software management this method is called by the installer to inform the listener of the current status of the install the stage is given by an integer constant as shown in table the percent is an integer between and suitelistener interface suitelistener is an interface that provides a notification that the current state of a suite has changed there is only one method defined in the suitelistener interface • void notifysuitestatechangedsuitemanagementtracker tracker suitestate newstate this method is called to notify a listener that the current state of a suite has changed a reference to the current suitemanagementtracker is included as well as an instance of suitestate which indicates the new state suitemanager interface the suitemanager interface consists of only seven methods that add or remove suites add or remove suite listeners retrieve a list of the currently installed suites or retrieve the current suiteinstaller • void addsuitelistenersuitelistener thelistener this method adds a suitelistener object to the current suitemanager • suite getsuitejavalangstring vendor javalangstring name this method returns an instance of the currently installed suite • suiteinstaller getsuiteinstallerbyte instdata int offset int length boolean ignoreupdatelock this method returns the current suiteinstaller • suiteinstaller getsuiteinstallerjavalangstring locationurl boolean ignoreupdatelock this method returns the current suiteinstaller • javautillist<suite> getsuitessuitetype type this method requests a list of installed suites of specified type • void removesuitesuite suite boolean ignoreremovelock this method removes a suite • void removesuitelistenersuitelistener thelistener this method removes a suitelistener tasklistener interface the tasklistener interface is an interface used to receive updates about a task that is currently running • void notifystatusupdatetask task taskstatus newstatus suitelistener interface developer’s guide this method is called when the current task has a new status update to report the method passes a reference to the task in question as well as a taskstatus object reporting the new status taskmanager interface the taskmanager interface is an interface used to manage the tasks • void addtasklistenertasklistener throws securityexception this method adds a tasklistener • task getcurrenttask throws securityexception this method returns the current task that is running • javautillist<task> gettasklistboolean includesystem this method obtains a list of task objects if system tasks are to be included that can be specified with the boolean parameter • void removetasklistenertasklistener listener this method removes a tasklistener • boolean setforegroundtasktask task throws javalangillegalargumentexception this method assigns the specified task to be the currently running foreground task a task is said to be in the foreground if the lui api or another ui api is supported and the task is visible on the display or if the key api is supported and input device events will be delivered to it if none of those packages is supported by the implementation a call to this method has no effect • boolean setprioritytask task taskpriority priority throws javalangillegalargumentexception changes the priority for the given task the method returns true if the change was successful or false otherwise • task starttasksuite suite string classname throws javalangillegalargumentexception javalangillegalstateexception starts a task from the given class name in the given suite this method throws an exception if suite is a library and can therefore not be started calling this method schedules a new application execution the new task is created with taskstatusstarting on success or taskstatusstartfailed on failure more than one call to this method can be performed with the same arguments in this case subsequent calls lead to attempts to restart the task in case of unsuccessful attempt to restart the task an appropriate exception is thrown or the corresponding state taskstatusstartfailed is set to the returned task object • boolean stoptasktask task throws javalangillegalargumentexception javalangillegalstateexception this method cancels an installation that is in progress it returns true if the cancellation was successful or false otherwise taskmanager interface software management managerfactory class the managerfactory class is a global factory that is used to obtain a suitemanager or a taskmanager implementation • static suitemanager getsuitemanager this method returns an implementation of a suitemanager • static taskmanager gettaskmanager this method returns an implementation of a taskmanager the suite class all imlet suites maintain a basic set of identification and state information that acts as a descriptor this descriptor is represented by the suite class suites can be one of four types presented in the suitetype enumeration and shown in table table suitetype enumeration suite type description stapplication the suite contains one or more midlets with an entry point that can be executed stlibrary the suite is a library that can be used by one or more applications stsystem the suite is a systemlevel application stinvalid the suite is invalid and cannot be found or executed in addition suites contain binary flags that describe their state presented in the suitestateflag enumeration and shown in table table suitestageflag enumeration state description available the suite is available for use enabled the suite is enabled when a suite is disabled any attempt to run application or use a library from this suite should fail system the suite is a systemlevel suite preinstalled the suite is a systemlevel suite that cannot be updated removedenied the suite should not be removed updatedenied the suite should not be updated the following are method present in the suite class • javalangstring getname managerfactory class developer’s guide this method returns the name for the given suite • javalangstring getvendor this method returns the vendor for the given suite • javalangstring getversion this method returns the version of the given suite • javalangstring getdownloadurl this method returns the url that the jad or jar was downloaded from • javautiliteration<string> getattributes this method returns a string array that provides the names of the available properties the properties returned are those from the jad file and the manifest combined into a single array • javalangstring getattributevaluestring name this method retrieves the value for the respective attribute name • suitetype getsuitetype this method returns the suite type see table for more information • public boolean issuitestatesuitestateflag state this method checks the current state boolean to see if it is true • public void setsuitestateflagsuitestateflag state boolean value throws javalangillegalargumentexception javalangillegalstateexception javalangsecurityexception this method sets the specified flag to the specified value if a suite has been created suitestateflagenabled and suitestateflagavailable are always set to true while suitestateflagremovedenied and suitestateflagupdatedenied are set to false these states can be changed by calling this method the suitestateflagsystem and suitestateflagpreinstalled flags are only set for system suites or preinstalled suites respectively and cannot be unset or set by this method to be able to set suite flags caller application should request javaxmicroeditionswmswmpermissionclient managesuite or javaxmicroeditionswmswmpermission crossclient managesuite permission see swmpermission for more details • public javautiliterator<javalangstring> getmidlets this method returns a list of the applications application class names in this suite the first application in the enumeration is the default application as specified in the midlet field of the descriptor • public javautiliterator<suite> getdependencies this method returns a list of the shared libraries this suite depends on • public boolean istrusted checks if this suite is trusted or not the return value is always true if it is a systemsuite • public boolean isinstalled the suite class software management checks if this suite is still installed or has been removed suiteinstaller class the managerfactory class is a global factory that is used to obtain a suitemanager or a taskmanager implementation • void addinstallationlistenersuiteinstalllistener listener this method adds a suiteinstalllistener to this suite installer • void removeinstallationlistenersuiteinstallationlistener listener this method removes a suiteinstalllistener to this suite installer • suitemanagementtracker start this method starts installation of the suite the installation can be the first installation of this suite or a reinstallation update of a suite that had been installed before a suiteinstalllistener must be added in order to handle callback requeststhis method returns an instance of suitemanagementtracker; the caller can observe the progress of the installation via the suiteinstalllistener added please note that the method may not return quickly depending on the provisioning mechanism used in the implementation of meep it may be necessary to download the entire jar data first in order to inspect the manifest of the application suite in order to find out whether this is a new installation or an update of an existing application suite depending on the network connection this may take some timein case the previous attempt to install this suite initiated by a previous call of the start method has not been finished at the time the new call takes place the call is queued and the new attempt to install in case the first one failed or the reinstallation in case the first call was successful respectively starts as soon as the first installation attempt or installation has been finisheda new instance of suitemanagementtracker will be created for every call to this method and assigned to the suite to be installed as soon as the installation has been completed successfully in case of an update of an existing suite the suitemanagementtracker instance is assigned to the existing suite object from the beginningif the initiating application does not have the right swmpermission the installation will fail with installerrorcodesunauthorizedinstall • void cancel begins installation of the suite suitemanagementtracker class an instance of this class is generated as soon as an installation or update of a suite is started using suiteinstallerstart invoking that method creates a new tracker instance whether two trackers refer to the same suite can be found out by calling getsuite for both and compare the returned suite instances the tracker instance created for a management operation is passed to any call of suitelistenernotifysuitestatechanged in order to inform about the progress of this operation for the installation of a new suite as long as the installation hasn't been successfully completed an instance of suitemanagementtracker is not assigned to any suite instance yet as it does not exit yet in these cases a call to getsuite returns null suiteinstaller class developer’s guide in case of an update the tracker is assigned to the existing suite from the beginning though this class has one method • suite getsuite this method returns the suite that this tracker is assigned to if the installation has completed successfully swmpermission class the swmpermission provides permission handling for swm api permissions an swmpermission object contains a scope and actions the scope is the scope of the permission valid scopes are client stands for permission to perform the listed actions only for applications assigned to the same client crossclient stands for permission to perform the listed actions also for applications assigned to other clients usually this is a permission reserved for the root client granting this permissions to other clients should be figured out well in order to avoid security breachesthe actions to be granted are passed to the constructor in a nonempty string containing a list of commaseparated keywords trailing and leading white spaces as well as those between the keywords and commas in the list are not allowed and lead to an illegalargumentexception the possible values can be seen in this table in the security policy provider chapter of the spec the actions string is converted to lowercase before processing this class has one constructor and several methods • swmpermissionjavalangstring scope javalangstring actions this method creates a new swmpermission object with the specified name and actions • public boolean impliesjavasecuritypermission p this method checks if the specified permission is implied by this object • string getactions this method returns the permitted actions of this permission as a comma separated list in alphabetical order • javasecuritypermissioncollection newpermissioncollection this method creates a new swmpermissioncollection task class the task class is in effect a simple task descriptor a task is the abstraction of the execution of an application see javaxmicroeditionmidletmidlet tasks are started using the taskmanagerstarttask method where the arguments specify the application suite and the class within the suite being the starting point of the application starting a new task attempts to execute corresponding application a task has a status as described in the taskstatus enumeration that describes corresponding application lifecycle state a task has a priority with possible values as described in taskpriority depending on whether the implementation supports multiple vms several tasks can run in parallelthere are special tasks called system tasks those tasks cannot be started or stopped via this api but are started by the swmpermission class software management system the issystemtask method can be used to find out whether a task is a considered a system task the task class contains the following methods • string getname this is a convenience method for returning the name of the task the returned string is the name of the application running in this task • taskpriority getpriority this method returns the priority of given task • public int getheapuse this method returns the heap use of given task • public taskstatus getstatus this method returns the task's status • public suite getsuite this method returns the suite information this task executed from • public boolean issystemtask this method returns a boolean indicating whether a task is a system task installererrorcode the installererrorcode provides several constants used by the installation routines these constants are shown in table table installer error codes constant description alreadyinstalled the jad matches a version of a suite already installed appintegrityfailuredependency conflict application integrity failure two or more dependencies exist on the component with the same name and vendor but have different versions or hashs appintegrityfailuredependency mismatch application integrity failure there is a component name or vendor mismatch between the component jad and imlet or component jad that depends on it appintegrityfailurehashmisma tch application integrity failure hash mismatch attributemismatch a attribute in both the jad and jar manifest does not match authorizationfailure application authorization failure possibly indicating that the application was not digitally signed installererrorcode developer’s guide table cont installer error codes constant description cadisabled indicates that the trusted certificate authority ca for this suite has been disabled for software authorization canceled canceled by user cannotauth the server does not support basic authentication circularcomponentdependency circular dynamic component dependency componentdepslimitexceeded dynamic component dependencies limit exceeded contenthandlerconflict the installation of a content handler would conflict with an already installed handler corruptdependencyhash a dependency has a corrupt hash code corruptjar an entry could not be read from the jar corruptprovidercert the content provider certificate cannot be decoded corruptsignature the jar signature cannot be decoded deviceincompatible the device does not support either the configuration or profile in the jad duplicatedkey duplicated jadmanifest key attribute expiredcakey the certificate authority's public key has expired expiredprovidercert the content provider certificate has expired insufficientstorage not enough storage for this suite to be installed invalidcontenthandler the microeditionhandler<n> jad attribute has invalid values invalidjadtype the server did not have a resource with the correct type or the jad downloaded has the wrong media type invalidjadurl the jad url is invalid invalidjartype the server did not have a resource with the correct type or the jar downloaded has the wrong media type invalidjarurl the jar url is invalid invalidkey a key for an attribute is not formatted correctly installererrorcode software management table cont installer error codes constant description invalidnativelibrary a native library contained within the jar cannot be loaded invalidpaymentinfo indicates that the payment information provided with the imlet suite is incomplete or incorrect invalidprovidercert the signature of the content provider certificate is invalid invalidsignature the signature of the jar is invalid invalidvalue a value for an attribute is not formatted correctly invalidversion the format of the version is invalid jadmoved the jad url for an installed suite is different than the original jad url jadnotfound the jad was not found jadservernotfound the server for the jad was not found jarclassesverificationfailed not all classes within jar package can be successfully verified with class verifier jarislocked component or midlet or imlet suite is locked by the system jarnotfound the jar was not found at the url given in the jad jarservernotfound the server for the jar was not found at the url given in the jad jarsizemismatch the jar downloaded was not the same size as given in the jad missingconfiguration the configuration is missing from the manifest missingdependencyhash a dependency hash code is missing missingdependencyjadurl a dependency jad url is missing missingjarsize the jar size is missing missingjarurl the url for the jar is missing missingprofile the profile is missing from the manifest missingprovidercert the content provider certificate is missing missingsuitename the name of midlet or imlet suite is missing missingvendor the vendor is missing installererrorcode developer’s guide table cont installer error codes constant description missingversion the version is missing newversion this suite is newer that the one currently installed noerror no error oldversion this suite is older that the one currently installed othererror other errors proxyauth indicates that the user must first authenticate with the proxy pushclassfailure the class in a push attribute is not in midlet <n> attribute pushdupfailure the connection in a push entry is already taken pushformatfailure the format of a push attribute has an invalid format pushprotofailure the connection in a push attribute is not supported revokedcert the certificate has been revoked rmsinitializationfailure failure to import rms data suitenamemismatch the midlet or imlet suite name does not match the one in the jar manifest toomanyprops indicates that either the jad or manifest has too many properties to fit into memory trustedoverwritefailure indicates that the user tried to overwrite a trusted suite with an untrusted suite during an update unauthorized web server authentication failed or is required unknownca the certificate authority ca that issued the content provider certificate is unknown unknowncertstatus the certificate is unknown to ocsp server unsupportedcert the content provider certificate has an unsupported version unsupportedcharencoding indicates that the character encoding specified in the mime type is not supported unsupportedpaymentinfo indicates that the payment information provided with the midlet or imlet suite is incompatible with the current implementation installererrorcode software management table cont installer error codes constant description untrustedpaymentsuite indicates that the midlet or imlet suite has payment provisioning information but it is not trusted vendormismatch the vendor does not match the one in the jar manifest versionmismatch the version does not match the one in the jar manifest installererrorcode developer’s guide general purpose inputoutput this chapter describes the general purpose inputoutput gpio functionality in the oracle java me embedded product gpio typically refers a generic pin on an embedded board whose behavior including whether it is an input or output pin can be programmed by the user at runtime gpio pins are often lined up in rows by design they have no dedicated purpose and are used by programmers for a wide variety of tasks for example • gpio pins can be enabled or disabled • gpio pins can be configured to be input or output • input values are readable often with a representing a high voltage and a representing a low voltage • input gpio pins can be used as interrupt lines which allow a peripheral board connected via multiple pins to signal to the primary embedded board that it requires attention • output pin values are both readable and writable warning be sure to observe manufacturer's specifications and warnings carefully for example with the raspberry pi board the voltage value that represents a high value on an input pin may be volts +v however other pins may output volts +v be sure to check the manufacturer's specifications to ensure that you are not placing too much voltage on an input gpio line as the board may not have an overvoltage protection gpio pins have much greater functionality than this but it is important to start with the basics setting a gpio output pin for this example you will need the following hardware table hardware for gpio example hardware where to obtain raspberry pi mb rev b b+ or raspberry pi various thirdparty sellers multimeter various sinometer dtb used in the example general purpose inputoutput perhaps the simplest example of working with the gpio functionality in the oracle java me embedded product is to set the highlow value of an arbitrary output pin and read its voltage with a multimeter in this example we set the value of gpio pin to alternate between high v and low v at intervals of seconds and seconds respectively the following example shows the source code import jdkdiounavailableperipheralexception; import jdkdiodevicemanager; import jdkdiogpiogpiopin; import javaioioexception; import javautillogginglevel; import javautillogginglogger; import javaxmicroeditionmidletmidlet; public class gpioexample extends midlet  gpiopin pin; public void startapp  try  pin = gpiopin devicemanageropen; systemoutprintln; threadsleep; for int i = ; i < ; i++  systemoutprintlnsetting pin to true; pinsetvaluetrue; threadsleep; systemoutprintlnsetting pin to false; pinsetvaluefalse; threadsleep; systemoutprintln; catch ioexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex;  catch interruptedexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex; public void pauseapp public void destroyappboolean unconditional  try  pinclose;  catch ioexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex; setting a gpio output pin developer’s guide the following permissions must be added to the application descriptor of the imlet so that it will execute without any security exceptions from the oracle java me embedded runtime table permissions for gpio example permission device operation jdkdiodevicemgmtpermission gpio open note that if you're using an ide such as netbeans as the development environment you will need to access the project properties of the project and set api permissions under the application descriptor as shown in figure figure api permissions in the application descriptor in netbeans after running the application set your multimeter to read dc voltage with a maximum of v then connect one of the leads of the multimeter to gpio and the other to gnd ground as the application is running note that the voltage that is read by the multimeter will jump from its low value of around v after a call to pinsetvaluefalse to its high value of around v after a call to pinsetvaluetrue this is shown in figure and figure warning remember that the gpio pin assignments on the raspberry pi do not match the pin numbers on the board for example gpio is not mapped to pin but instead pin see appendix a or the hardwareappropriate getting started guide for the pin assignments for the target boards of the oracle java me embedded software setting a gpio output pin general purpose inputoutput figure raspberry pi pin with low v voltage figure raspberry pi pin with high v voltage working with a breadboard when prototyping circuits it is often helpful to have a way of connecting wires without having to perform soldering in some cases if there are only a few connections you can use jumper wires however when layout out more complex circuits it's helpful to use a breadboard a typical breadboard is shown in figure working with a breadboard developer’s guide figure a typical breadboard a breadboard consists of a large number of holes each of which are wired together on the bottom using a standardized pattern such as the one shown in figure note that the two columns on both the left and the right of the breadboard are wired verticallythese provide power + and ground connections that can be tapped into to the horizontal rows on either side of the center line on the other hand are used to create circuits circuits can be created using small wires with metal tips on each end that can plug into the holes working with a breadboard general purpose inputoutput figure wiring pattern for a typical breadboard for the raspberry pi we can connect the gpio pins on the pi to a breadboard using a device called a tcobbler extension board this device attaches a ribbon cable to the gpio pins which in turn connects to the tcobbler board the tcobbler board is then inserted into the top of the breadboard as shown in figure working with a breadboard developer’s guide figure tcobbler extension board for the raspberry pi once connected to the pi you can use any of the holes running along the red stripe on the left side of the breadboard to provide + volts v or any of the holes running along the red stripe on the right side of the breadboard to provide + volts v in addition any of the holes running along the blue stripes on either side of the board connect to the ground gnd on the raspberry pi the gpio pins on the raspberry pi map to the pins on the tcobbler and hence the respective horizontal rows on the breadboard as shown in figure working with a breadboard general purpose inputoutput table broadcom gpio to tcobbler conversion gpio pi pin number alternate name pin sda pin scl pin p pin ce pin ce pin miso pin mosi pin sclk pin txd pin rxd pin p pin p pin p pin p pin p pin p blinking an led we can use the code in the first example to create a small circuit on the breadboard that turns on an off a lightemitting diode led for this example you will need the following equipment table equipment needed for blinking led example hardware where to obtain led any electronics store ohm resistor any electronics store tcobbler and breadboard adafruit jumper wires male to male adafruit use the breadboard to connect one end of a ohm resistor to a row that connects to gpio which is marked on the tcobbler by ce plug the other end of the ohm blinking an led developer’s guide resistor into an unused row further down the breadboard then run an led from that row an adjacent row and then connect that row to the ground gnd the circuit should look similar to the schematic in figure figure schematic for wiring an led to gpio when completed you should have a prototype that looks like figure run the first example again and you should see the led light blinking off an on whenever the setvaluetrue call is made on the gpiopin object note remember that an led is a diode which by definition only allows current to travel one way through it if your led does not light up when the voltage is applied try flipping the connections so that the current travels the reverse direction through the diode blinking an led general purpose inputoutput figure wiring an led to gpio pin testing output and input pins our next gpio example will take the output voltage from one pin and redirect it back to an adjacent input pin while creating a listener on the input pin that reacts accordingly for this example you will need the following hardware testing output and input pins developer’s guide table hardware for example hardware where to obtain raspberry pi mb rev b various thirdparty sellers multimeter various sinometer dtb used in the example here we use gpio and on the raspberry pi due to their proximity to each other these pins are right next to gpio and gnd which was used in the previous example in the example below we've added a listener to an input pin that will trigger whenever the input voltage changes in both directions hightolow and lowtohigh import jdkdiounavailableperipheralexception; import jdkdiodevicemanager; import jdkdiogpiogpiopin; import jdkdiogpiopinevent; import jdkdiogpiopinlistener; import javaioioexception; import javautillogginglevel; import javautillogginglogger; import javaxmicroeditionmidletmidlet; public class gpioexample extends midlet  gpiopin pin; gpiopin pin; public void startapp  try  pin = gpiopin devicemanageropen; output pin by default pin = gpiopin devicemanageropen; input pin by default pinsetinputlistenernew mypinlistener; systemoutprintln; threadsleep; for int i = ; i < ; i++  systemoutprintlnsetting pin to true; pinsetvaluetrue; threadsleep; systemoutprintlnsetting pin to false; pinsetvaluefalse; threadsleep; systemoutprintln; catch ioexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex;  catch interruptedexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex; testing output and input pins general purpose inputoutput  public void pauseapp public void destroyappboolean unconditional  try  pinclose; pinclose;  catch ioexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex;  class mypinlistener implements pinlistener  @override public void valuechangedpinevent event  try  systemoutprintlnpin listener for pin has been called!; systemoutprintlnpin is now + pingetvalue;  catch ioexception ex  loggergetloggergpioexampleclassgetname loglevelsevere null ex;   table shows the permission that must be added to the application descriptor of the imlet so that it will execute without any security exceptions from the oracle java me embedded runtime table permissions for example permission device operation jdkdiodevicemgmtpermission ** open after running the application either connect one of the leads of the multimeter to the gpio pin and the other to the gpio pin of the raspberry pi or create a compatible circuit on a breadboard set your multimeter to read dcv with a maximum of mv as the application is running note that the voltage that is read by the multimeter will jump from its low value to its high voltage although the voltages will be much smaller than that from gpio try disconnecting the lead from gpio momentarily and reconnecting it when gpio is high the output of the program should reflect that the listener is called both when the lead is released and when it is reconnected warning remember that the gpio pin assignments on the raspberry pi do not match the pin numbers on the board for example gpio is not mapped to pin but instead pin likewise gpio is mapped to pin see appendix a testing output and input pins developer’s guide and appendix b for the pin assignments for the target boards of the oracle java me embedded software the output of the application when running in netbeans is shown in figure figure output of example testing output and input pins general purpose inputoutput testing output and input pins developer’s guide working with the ic bus the ic bus often referred to as ic or isquaredc is a lowspeed bus frequently used between microcontrollers and peripherals ic uses only two bidirectional lines serial data line sda and serial clock scl often pulledup with resistors typical voltages used are + v or + v although systems with other voltages are permitted when using the raspberry pi be sure to check the manufacturer's specifications as to which voltages are acceptable for powering the peripheral the raspberry pi provides both v and v pins to enable ic on the raspberry pi add the following lines to the etcmodules files and reboot note that the file will need to be edited with root privileges icbcm icdev experimenting with a segment display for this exercise you will need the following hardware table hardware for segment display example hardware where to obtain raspberry pi mb rev b b+ or raspberry pi various thirdparty sellers adafruit digit segment display with htk ic backpack adafuit or amazon requires a small amount of soldering of the led display unit to ic logic board as well as ic connector pins jumper wires female to female x electronics store we used schmartboard pn rev a our first example allows us to use the gpio and gpio pins for the ic data and clock connections using these connections we will write a simple program that allows us to set the display using an ic connection in order to hook up the segment display to the raspberry pi properly the jumper wires must be connected as shown in table note that because there are only four connections we opted not to use a tcobber and a breadboard in this example table raspberry pi to htk jumper connections pins on raspberry pi htk board v pin vcc working with the ic bus table cont raspberry pi to htk jumper connections pins on raspberry pi htk board ground pin gnd gpio pin sda serial data gpio pin scl serial clock first we need a basic class that communicates with the htk led backpack that is soldered to the actual segment led display the following example shows the source code for the segment ic display driver import jdkdiodevicemanager; import jdkdioicbusicdevice; import jdkdioicbusicdeviceconfig; import javaioioexception; import javaniobytebuffer; import javautillogginglevel; import javautillogginglogger; public class ledbackpack  icdeviceconfig ledbackpackconfig; int displaybuffer = new int; byte oscillatoron = x; byte brightness = byte xe; static byte htkblinkcmd = byte x; static byte htkblinkdisplayon = byte x; static byte htkblinkoff = byte ; static byte htkblinkhz = byte ; static byte htkblinkhz = byte ; static byte htkblinkhalfhz = byte ; static byte letterj = xe; static byte lettera = x; static byte letterv = xe; static final byte numbertable =  xf * * x * * xb * * xf * * x * * xd * * xd * * x * * xf * * xf * * x * a * xc * b * x * c * xe * d * x * e * experimenting with a segment display developer’s guide x * f *; public ledbackpack  ledbackpackconfig = new icdeviceconfig x ;  void begin  try icdevice slave = devicemanageropenledbackpackconfig  bytebuffer osconcmd = bytebufferwraposcillatoron; slavewriteosconcmd; slaveclose;  catch ioexception ioe  loggergetloggerledbackpackclassgetname loglevelsevere null ioe;  setblinkratehtkblinkoff; setbrightness;  void setbrightnessint b  if b >  b = ;  else if b <  b = ;  byte ea = byte brightness b; try icdevice slave = devicemanageropenledbackpackconfig  bytebuffer brightnesscmd = bytebufferwrapea; slavewritebrightnesscmd; slaveclose;  catch ioexception ioe  loggergetloggerledbackpackclassgetname loglevelsevere null ioe; void setblinkrateint b  if b >  b = ; turn off if not sure  else if b <  b = ;  byte ea = byte htkblinkcmd htkblinkdisplayon b << ; try icdevice slave = devicemanageropenledbackpackconfig  bytebuffer blinkratecmd = bytebufferwrapea; slavewriteblinkratecmd; experimenting with a segment display working with the ic bus  slaveclose;  catch ioexception ioe  loggergetloggerledbackpackclassgetname loglevelsevere null ioe; void writedisplay  try icdevice slave = devicemanageropenledbackpackconfig  byte start = x; bytebuffer startcmd = bytebufferwrapstart; slavewritex startcmd; for int i = ; i < displaybufferlength; i++  byte ba = byte displaybufferi & xff; bytebuffer bcmd = bytebufferwrapba; slavewritei bcmd;  slaveclose;  catch ioexception ioe  loggergetloggerledbackpackclassgetname loglevelsevere null ioe; void clear  for int i = ; i < displaybufferlength; i++  displaybufferi = ; this driver class contains five methods begin setbrightness setblinkrate writedisplay and clear let's cover each of these in more detail the begin method will initialize the display there are three operations that must be performed to do this properly first the oscillator on the htk led backboard must be turned on we can do this by sending a byte value of hex x across the bus next we set the blink rate of the segment display to one of four values off hz hz or hz finally we can set the brightness of the display using a value of to for the latter two operations we make use of the next two methods which can also be called independently the setblinkrate and setbrightness methods simply take an input value perform bounds checking and calculate the correct byte value to send across the bus just like turning on the oscillator we only need to send one byte across the bus to modify the blink rate or brightness to any level we choose the writedisplay method on the other hand is a little more complex here the class makes use of an array of integers declared as a field that serves as a display experimenting with a segment display developer’s guide buffer in reality the writedisplay method will truncate any value larger then before sending it across the bus but making it an array of integers is helpful for the user each of the entries in the array will map to an address on the htk led backpack that can be written to using the ic bus the purpose of each of the addresses is shown in table note that since the htk can drive different types of led displays several of the addresses are ignored when using this particular character segment display table htk segment display addresses address purpose x segment display character and period x ignored x segment display character and period x ignored x colon xff for colon on; x for colon off x ignored x segment display character and period x ignored x segment display character and period x ignored each address can have one byte written to it the contents of each byte is mapped out in binary as shown in figure as such the number with a decimal point is represented in binary as which is equal to x in hexadecimal note that address x is reserved for the colon that appears between the first two numbers and the second two numbers in the display; it does not represent character figure binary encoding for segment display the following example shows a sample imlet that will write the word java without any decimal points or colon to the display even though the v looks the same as a u in the segment display import javaxmicroeditionmidletmidlet; experimenting with a segment display working with the ic bus public class icexample extends midlet  public void startapp  ledbackpack backpack = new ledbackpack;  backpackbegin; backpacksetbrightness; backpacksetblinkrateledbackpackhtkblinkoff; backpackclear; backpackwritedisplay;  backpackdisplaybuffer = ledbackpackletterj; backpackdisplaybuffer = ledbackpacklettera; backpackdisplaybuffer = x; no colon backpackdisplaybuffer = ledbackpackletterv; backpackdisplaybuffer = ledbackpacklettera; backpackwritedisplay; public void pauseapp public void destroyappboolean unconditional the following permissions must be added to the application descriptor of the project so that it will execute without any security exceptions from the oracle java me embedded runtime table api permissions for segment display project permission device operation jdkdiodevicemgmtpermission ** open jdkdioicbusicpinpermission ** open after running the application you should see the display as shown in figure experimenting with a segment display developer’s guide figure result of running the segment display imlet experimenting with a x lcd display for this exercise you will need the following hardware table hardware for example hardware where to obtain raspberry pi mb rev b b+ or raspberry pi various thirdparty sellers x lcd display with an hd controller amazon requires a small amount of soldering for the connector pins that run on the top of the logic board pcfn bit io expander chip mouser electronics tcobbler and breadboard electronics store jumper wires electronics store this example uses the ic bus to interface to an lcd display with a hitachi hd backboard the hdbased x character lcds are inexpensive and widely available however in addition to the lcd display we must also use a pcf based ic which is an general purpose bidirectional bit io port expander that uses the ic protocol the first step is to hook up the raspberry pi to the pcf chip typically an ic chip is installed on a breadboard vertically along the center aisle with the pins from the ic experimenting with a x lcd display working with the ic bus connecting to the holes adjacent to the center the pinouts for the pcfn ic are shown in figure figure pinout diagram for pcfn ic once the chip is on the breadboard there are several pins on the chip that must be connected to the tcobbler using jumper wires as shown in table table raspberry pi to pcfn jumper connections pins on tcobbler pi pcfn pins +v pin vcc gnd pin gnd sda gpio pin sda serial data scl gpio pin scl serial clock gnd pin a gnd pin a gnd pin a the first four pins shown in are the standard ic connections that are required of any slave device that wishes to use the ic bus however the remaining pins are used to set the slave address on ic bus # represented as a binary digit from a= a= a= that is added to the hexidecimal value of x because we are not running voltage on any of these pins the address of the pcfn chip on the ic bus should remain x if you'd like to verify this login to the raspberry pi and issue the command shown in figure here the icdetect command shows that on bus there is a device at address x to change the address try connecting a k resistor between the v pin and one of the ax pins and rerunning the command the address that is reported should change accordingly experimenting with a x lcd display developer’s guide figure running the icdetect command the remaining pins pp and int high on the pcfn are used to communicate with other devices in this case the hd chip that drives the x lcd display table shows the connections to and the pcfn chip table connections to pcfn chip raspberry pi tcobbler pcfn scl gpio pin scl sda gpio pin sda gnd pin a see discussion on ic address above gnd pin a gnd pin a +v pin vdd gnd pin vss table shows the connections between the pcfn chip and the hd controller table connection between pcfn chip and hd controller pcfn hd p db p db p db experimenting with a x lcd display working with the ic bus table cont connection between pcfn chip and hd controller pcfn hd p db p rs p rw p e table shows connection between the tcobbler and the hd controller table connection to hd chip raspberry pi tcobbler hd +v pin vdd to +v vo variable resistor if desired for dimming backlit display gnd pin vss before connecting the px lines on the ic try placing a resistor and an led on a line coming from the p pin then run the code shown in the following example import javaxmicroeditionmidletmidlet; import jdkdiodevicemanager; import jdkdioicbusicdevice; import jdkdioicbusicdeviceconfig; import javaioioexception; public class ioexpanderexample extends midlet  public void startapp  ledbackpackconfig = new icdeviceconfig x ; try icdevice slave = devicemanageropenledbackpackconfig  slavewritebytex;  catch ioexception ex  handle exception public void pauseapp public void destroyappboolean unconditional  experimenting with a x lcd display developer’s guide to understand this example it helps to look at the data line dialog as shown in figure each of the px lines can be activated or deactivated by writing a binary number to the slave device where p represents the mostsignificant digit and p represents the leastsignificant digit writing a value of x to the slave device will activate only the p line which should in turn make the led that is connected to it light up be sure that the led's cathode and anode connected are the right direction and that there is a resistor in line so the led does not burn out! note that the led will remain lit until a new value is written to the bus or the pcfn chip loses power figure io data bus with the pcfn chip next complete the circuit according to table the following shows a sample driver class that will control the hd import javaxmicroeditionmidletmidlet; import jdkdiodevicemanager; import jdkdioicbusicdevice; import jdkdioicbusicdeviceconfig; import javaioioexception; import javautillogginglevel; import javautillogginglogger; public class lcddisplay  icdeviceconfig ledbackpackconfig; icdevice slave; public lcddisplay throws interruptedexception ioexception  ledbackpackconfig = new icdeviceconfig x ; slave = devicemanageropenledbackpackconfig;  public void begin throws interruptedexception ioexception  slavewritex; byte result = byte slaveread; threadsleep; slavewritex; byte result = byte slaveread; threadsleep; slavewritex; byte result = byte slaveread; threadsleep; experimenting with a x lcd display working with the ic bus  slavewritex; byte result = byte slaveread; writecommandbyte x; writecommandbyte x; writecommandbyte x; writecommandbyte x; writecommandbyte xc; threadsleep; byte result = byte slaveread;  public void writecharacterbyte charvalue throws interruptedexception ioexception  slavewritebyte x charvalue >> ; strobe; slavewritebyte x charvalue & xf; strobe; slavewritex; threadsleep;  public void writecommandbyte value throws interruptedexception ioexception  slavewritebyte value >> ; strobe; slavewritebyte value & xf; strobe; slavewritex; threadsleep;  public void writestringint line string string throws interruptedexception ioexception  if line ==  writecommandbyte x;  else if line ==  writecommandbyte xc;  else if line ==  writecommandbyte x;  else if line ==  writecommandbyte xd;  char chars = stringtochararray; for int i = ; i < charslength; i++  writecharacterbyte charsi; public void strobe throws interruptedexception ioexception experimenting with a x lcd display developer’s guide threadsleep; byte readresult = byte slaveread; readresult = x; slavewritereadresult; threadsleep; readresult = byte slaveread; readresult &= xbf; slavewritereadresult;  public void clear throws interruptedexception ioexception  threadsleep; writecommandbyte x; threadsleep; writecommandbyte x; threadsleep;  public void end throws ioexception  slaveclose;  to use the driver class run the imlet shown in the following example import javaioioexception; import javaxmicroeditionmidletmidlet; public class icexample extends midlet  public void startapp  lcddisplay display; try  display = new lcddisplay; displaybegin; displayclear; displaywritestring java me; displaywritestring embedded; displayend;  catch interruptedexception ex  exprintstacktrace;  catch ioexception ex  exprintstacktrace;  experimenting with a x lcd display working with the ic bus public void pauseapp public void destroyappboolean unconditional the following permissions must be added to the application descriptor of the project so that it will execute without any security exceptions from the oracle java me embedded runtime table api permissions for lcd example permission device operation jdkdiodevicemgmtpermission ** open jdkdioicbusicpinpermission ** open after running the application you should see the display as shown in figure figure lcd display after running example experimenting with a x lcd display developer’s guide the serial peripheral interface spi bus the serial peripheral interface or spi bus is a synchronous serial data link that operates in full duplex mode in other words data can be sent and received at the same time devices communicate in masterslave mode where the master device initiates the data exchange with one or more slaves multiple slave devices are allowed with individual slave select lines the spi bus specifies four logic signals • sclk serial clock a clock signal that is sent from the master • mosi master output slave input data sent from the master to the slave • miso master input slave output data sent from the slave to the master • ss slave select sent from the master active on low signal often paired with the chip select cs line on an integrated circuit that supports spi in order to enable the spi bus on the raspberry pi uncomment the entry spibcm in the file etcmodprobedraspiblacklistconf note that you will need to have root privileges to edit the file using the spi bus to communicate with an adc because the raspberry pi board does not come with a analogtodigital converter the spi bus can be used to communicate with a peripheral analogtodigital converter chip that is reading an analog signal for this exercise you will need the following hardware table hardware for example hardware where to obtain raspberry pi mb rev b various thirdparty sellers texas instruments tlccp bit adc various electronics suppliers we used mousercom tcobbler and breadboard adafuit see chapter for more information potentiometer electronics store jumper wires mm and ff electronics store the serial peripheral interface spi bus the data sheet of the tlccp shows pins as shown in figure note that the spi connections reside on the right side of the chip while the connections for measuring the analog signal are on the left side of the chip figure pinouts for tlccp analogtodigital converter chip in order to connect the tlccp chip to the raspberry pi the spi connections must be connected as shown in table table raspberry pi to tlccp spi pins pins on raspberry pi tlccp adc board pins right side v vcc sclk gpio  pin clk miso gpio pin data ce gpio  pin cs the other four pins must be connected to provide the analog voltage to measure in this example we are using a potentiometer in effect a variable resistor to vary the amount of voltage being sent into the analog in pin table shows how to connect the remaining pins on the tclcp chip table tlccp to analog signal pins tlccp adc board pins left side analog signal vref+ voltage side pin on potentiometer v analog in variable voltage signal middle pin on potentiometer vref voltage other side pin on potentiometer gnd to ground note that in order to complete our circuit and provide power to the potentiometer the vref+ must be also connected to a v input and the vref must be connected to a ground the chip does not provide voltage you can test the voltage that is being sent through the potentiometer with a voltmeter to ensure that the circuit is working properly the completed circuit on the breadboard is shown in figure using the spi bus to communicate with an adc developer’s guide figure breadboard with the analogtodigital converter circuit once this is completed we can use the source code in the following example to test out the adc chip import jdkdiodevice; import jdkdiodevicemanager; import jdkdiospibusspidevice; import jdkdiospibusspideviceconfig; import javaioioexception; import javaniobytebuffer; import javautillogginglevel; import javautillogginglogger; using the spi bus to communicate with an adc the serial peripheral interface spi bus import javaxmicroeditionmidletmidlet; public class spiexample extends midlet  public void startapp  systemoutprintlnpreparing to open spi device;  spideviceconfig config = new spideviceconfig  spideviceconfigcsactivelow  peripheralbigendian;  try spidevice slave = spidevicedevicemanageropenconfig  systemoutprintlnspi device opened;  for int i = ; i < ; i++  bytebuffer sndbuf = bytebufferwrapnew bytex; bytebuffer rcvbuf = bytebufferwrapnew byte; slavewriteandreadsndbufrcvbuf; systemoutprintlnanalog to digital conversion at + i + is + rcvbufget; threadsleep; catch ioexception ioe  handle exception  catch interruptedexception ex  loggergetloggerspiexampleclassgetname loglevelsevere null ex; public void pauseapp public void destroyappboolean unconditional this program is very simple it opens up a connection to the raspbeery pi spi bus using a spideviceconfig and writes a byte to the peripheral device the adc chip since there is no input connection being sent from the master the raspberry pi to the slave the adc chip this data is effectively ignored the spi bus will concurrently attempt to retrieve a byte of data from the chip this byte is passed along the miso line which returns an bit number that represents the current voltage level this process will be repeated times with a onesecond delay between each sampling on the bus the program output looks like the following as the program is running try turning the dial on the potentiometer to vary the voltage that is being sent into the chip here we are turning the voltage from higher to lower and the adc chip is representing this with a steady drop in the bit value that is returned using the spi bus to communicate with an adc developer’s guide starting emulator in execution mode about the open device device opened value for is value for is value for is value for is value for is value for is value for is using the spi bus to communicate with an adc the serial peripheral interface spi bus using the spi bus to communicate with an adc developer’s guide working with java me encryption learn about the the encryption functionality available to the java me embedded programmer with the oracle java me embedded release topics • connecting to an ssl server • authenticating an ssl server • accessing the keystore • configuring the board as a secure server connecting to an ssl server creating a connection to an ssl server only requires the programmer to include an appropriate connectionoption object in the call to connectoropen this example requires the following hardware table hardware for example hardware where to obtain raspberry pi mb rev b b+ or raspberry pi various thirdparty sellers in this example we use the oracle java me embedded runtime to connect to a server on the network that is running tlsv or higher on port note that this example requires the user to configure a web server that will accept an incoming connection on that port and uses the proper protocol and is properly signed by a valid certificate authority after this is setup the value of the stestserveraddr variable should be changed accordingly the following example shows the source code import javaiodatainputstream; import javaiodataoutputstream; import javaioioexception; import javaioinputstream; import javaiooutputstream; import javaxmicroeditionioconnectionoption; import javaxmicroeditionioconnector; import javaxmicroeditioniosecureconnection; import javaxmicroeditionmidletmidlet; public class sslconnect extends midlet  @override working with java me encryption  public void startapp  secureconnection sc; connectionoption<string> protocol; inputstream is; outputstream os; datainputstream dis; dataoutputstream dos;  string stestserveraddr = examplecom;  try  protocol = new connectionoption<>protocol tlsv; sc = secureconnection connectoropenssl + stestserveraddr protocol;  systemoutprintlnconnection successful to; systemoutprintlnaddress + scgetaddress; systemoutprintlnport + scgetport; systemoutprintlncipher suite + scgetsecurityinfogetciphersuite; systemoutprintlnprotocol name + scgetsecurityinfogetprotocolname; systemoutprintlnprotocol version + scgetsecurityinfogetprotocolversion;  catch ioexception ex  exprintstacktrace; @override public void pauseapp @override public void destroyappboolean unconditional the following permissions must be added to the application descriptor of the imlet so that it will execute without any security exceptions from the oracle java me embedded runtime table permissions for example permission device javaxmicroeditioniosslprotocolpermission ssl** javaxmicroeditioniosocketprotocolpermission socket** note that if you're using an ide such as netbeans as the development environment you will need to access the project properties of the project and set api permissions under the application descriptor as shown in figure connecting to an ssl server developer’s guide figure api permissions in the project properties dialog in netbeans tip if your server does not currently use a certificate from a signed certificate authority ca you can import a server certificate to the java me embedded device locate the mekeytool executable in the bin directory of the oracle java me embedded sdk distribution and enter the following command using a windows command prompt c\sdk\bin> mekeytoolexe import xdeviceembeddedexternaldevice keystore mycertcrt this command will connect to the keystore on the embedded device currently recognized by the device manager as embeddedexternaldevice and install the certificate with the filename mycertcrt note that this certificate must be identical to the one residing on the server that is authenticating ssltls connections or the java embedded runtime will throw a javaxmicroeditionpkicertificateexception when attempting a secure connection see appendix d for more information on using the mekeytool utility after running the application you should see output that identifies a successful connection to the server at the address and port specified the program will then output the address and port as well as the security connection parameters that were used to make the connection connection successful toaddress port cipher suite tlsrsawithaescbcshaprotocol name tlsprotocol version connecting to an ssl server working with java me encryption authenticating an ssl server in this example we expand on the connectionoption objects to provide an option to authenticate an https server as with the previous example the value of the serveraddr variable should be modified to point to a properly configured server the following example shows the source code note oracle java me embedded has removed support for sslv due to a widelypublicized security vulnerability however the source code example is applicable to other forms of transportlayer security included with oracle java me embedded import javaiodatainputstream; import javaioioexception; import javaioinputstream; import javaiooutputstream; import javautillogginglevel; import javautillogginglogger; import javaxmicroeditionioconnectionoption; import javaxmicroeditionioconnector; import javaxmicroeditioniohttpconnection; import javaxmicroeditioniohttpsconnection; import javaxmicroeditionmidletmidlet; import javaxmicroeditionrmsrecordstore; ** public class authenticateserver extends midlet  public static final int passed = ; public static final int failed = ;  @override public void startapp  string serveraddr = httpsexamplecom; httpsconnection hc; connectionoption<string> auth; connectionoption<string> protocol; int response = httpconnectionhttpnotfound; try  auth = new connectionoption<>authenticateserver true; protocol = new connectionoption<>protocol tlsv; hc = httpsconnection connectoropenserveraddr connectorreadwrite auth protocol; response = sendreqandgetresphc; request get if response == passed  systemoutprintlnpass;  else  systemoutprintlnfailed; authenticating an ssl server developer’s guide catch ioexception ex  exprintstacktrace;  catch securityexception ex  exprintstacktrace;  catch runtimeexception ex  exprintstacktrace; @override public void destroyappboolean unconditional private int sendreqandgetresphttpsconnection hc  int rescode = ; boolean pass = true; outputstream os; try  httpsconnection hcsetrequestmethodhttpconnectionget; rescode = httpsconnection hcgetresponsecode; systemoutprintlnresponse code is + rescode;  if rescode == httpconnectionhttpok  return passed;  else  return failed; catch ioexception ex  exprintstacktrace; return failed;  finally  try  hcclose;  catch ioexception ex   the following permissions must be added to the application descriptor of the imlet note that because we are using https we require the https protocol permission even through the implementing protocol we requested for https tlsv is the same table permissions for example permission device javaxmicroeditioniohttpsprotocolpermission https** this example is similar to the previous example here however we create an https connection with requests and responses instead of a direct ssl connection an authenticating an ssl server working with java me encryption additional connectionoption object also instructs the java me example to authenticate the server auth = new connectionoption<>authenticateserver true; enabling this option will verify that the server certificate is valid and has been signed by a valid certificate authority as well as performing a number of verification steps against the data presented by the certificate if the test is successful you should see output that identifies a connection to the https server at the address and port specified pass accessing the keystore each java me embedded implementation has one or more keystores typically located under the appdbcerts directory there is one keystore for each application privilege level such as untrusted or operator in order to programmatically access the keystore use the classes in the comoraclecryptokeystore package the following example shows source code used to create five certificates store them in the keystore and then iterate over the contents of the keystore when completed import javaiodatainputstream; import comoraclecryptocertxcertificate; import comoraclecryptocertxcertificatebuilder; import comoraclecryptokeypairkeypair; import comoraclecryptokeypairkeypairgenerator; import comoraclecryptokeypairprivatekey; import comoraclecryptokeypairspecrsakeygenparameterspec; import comoraclecryptokeystorekeystore; import comoraclecryptokeystorekeystoreentry; import comoraclecryptokeystorekeystoreexception; import javasecurityspecalgorithmparameterspec; import javautilhashmap; import javautiliterator; import javautillist; import javautillogginglevel; import javautillogginglogger; import javaxmicroeditionmidletmidlet; public class generatekeystore extends midlet  @override public void startapp  try  hashmap<string keystoreentry> shadow = new hashmap; keystore ks = keystoregetinstancekeystorestorageclient; for int i = ; i < ; i++  keystoreentry kse = generaterandomkeystoreentry; systemoutprintlnadd entry with certificate serial number + ksegetcertificategetserialnumber; ksaddentrykse;  accessing the keystore developer’s guide list<keystoreentry> list = ksgetentries; iterator<keystoreentry> iter = listiterator; while iterhasnext  keystoreentry kse = iternext; string subject = ksegetcertificategetsubject; systemoutprintlncertificate subject + subject; privatekey entrykey = ksegetprivatekey; byte entryencoded = entrykeygetencoded; systemoutprintlnprivate key + entryencodedtostring; catch securityexception ex  handle exception  catch keystoreexception ex  handle exception @override public void destroyappboolean unconditional private keystoreentry generaterandomkeystoreentry  keystoreentry entry = null; try  algorithmparameterspec param; param = new rsakeygenparameterspec ; keypairgenerator kpg = keypairgeneratorgetinstancersa; kpginitializeparam; keypair kp = kpggeneratekeypair; int serialnumber = intmathrandom * ; systemoutprintlncreate x certificate serial + serialnumber; xcertificatebuilder builder = new xcertificatebuilderkp; buildersetserialnumber + serialnumber; buildersetsubjectc=jp;st=ne;l=menlo;o=oracle;ou=java;cn=test + serialnumber; buildersetvalidityindays; xcertificate cert = buildercreate; entry = new keystoreentrycert kpgetprivate test;  catch throwable ex  exprintstacktrace;  return entry;  accessing the keystore working with java me encryption the following permissions must be added to the application descriptor of the imlet to access the keystore on the java me embedded device table permissions for example permission device comoraclecryptokeystorekeystorepermission clientonly this example will access the local keystore on the embedded board client with the following call keystore ks = keystoregetinstancekeystorestorageclient; note that the keystore that is accessed will depend on the trust level of the application if the java me embedded application is not signed it will fall into the untrusted security domain by default we can access the keystore similar to accessing it with the java se environment first we create a keystoreentry object and populate it with a certificate this is in turn added to the embedded keystore via a simple loop and iterated over later in the program here is the output after running the program creating x certificate with serial number add keystore entry with certificate serial number fcreating x certificate with serial number add keystore entry with certificate serial number creating x certificate with serial number add keystore entry with certificate serial number creating x certificate with serial number add keystore entry with certificate serial number fdcreating x certificate with serial number add keystore entry with certificate serial number bd certificate subject c=jpst=nel=menloo=oracleou=javacn=testprivate key b@fcdcfccertificate subject c=jpst=nel=menloo=oracleou=javacn=test private key b@cccacertificate subject c=jpst=nel=menloo=oracleou=javacn=testprivate key b@ebccertificate subject c=jpst=nel=menloo=oracleou=javacn=test private key b@dccertificate subject c=jpst=nel=menloo=oracleou=javacn=testprivate key b@ae configuring the board as a secure server the java me embedded binary contains functionality that enables an embedded board to function as a server using secure protocols the functionality is identical to the configuration of a java se server the secure server connection requires a server certificate on the device this certificate should be imported into the device with a private key mekeytoolexe import xdeviceembeddedexternaldevice keystore myservertcertjks storepass <store password> keypass <private key password> the following example shows source code used to setup the embedded board as a server import javaioioexception; import javautillogginglevel; import javautillogginglogger; import javaxmicroeditionioconnectionoption; import javaxmicroeditionioconnector; configuring the board as a secure server developer’s guide import javaxmicroeditioniosecureconnection; import javaxmicroeditioniosecureserverconnection; import javaxmicroeditionmidletmidlet; public class embeddedserver extends midlet  @override public void startapp  string port = ; secureserverconnection ssc = null; connectionoption<string> protocol = null; try  protocol = new connectionoption<>protocol tlsv; connectionoption servercert = new connectionoptioncertificate <certificate subject dn>; ssc = secureserverconnection connectoropenssl+port protocol servercert; systemoutprintlnconnection listening on; systemoutprintlnaddress + sscgetlocaladdress; systemoutprintlnport + sscgetlocalport; sscacceptandopen; systemoutprintlnconnection made!;  catch securityexception ex  exprintstacktrace;  catch runtimeexception ex  exprintstacktrace;  catch ioexception ex  exprintstacktrace; @override public void destroyappboolean unconditional note in this code example the <certificate subject dn> parameter should be replaced with the subject dn of the used certificate the following permissions must be added to the application descriptor of the imlet to access the keystore on the java me embedded device table permissions for example permission device javaxmicroeditioniosslprotocolpermission ssl** javaxmicroeditioniosslprotocolpermission ssl* configuring the board as a secure server working with java me encryption this example uses a secureserverconnection object which creates a socket at port using the ssl protocol it is essential to include the following line as well sscacceptandopen; without this line the secure socket will never accept an incoming connection and any attempt to make a connection will result in a runtime exception note that a call to this method will block until a successful connection is made as with the previous examples the java me embedded keystore must have a valid server certificate for the trustlevel that the application is running under which will be validated upon any secure connection if the certificate is absent or is not valid an exception will be thrown on the server the clientside code to make the connection is nearly identical to the clientside example earlier in this chapter with a slight change to the port and the protocol a successful connection should output the following address port connection made! configuring the board as a secure server developer’s guide a java me optimization techniques this appendix covers common optimization techniques when working with java me embedded devices many of these techniques are common to the cldc vm in both java embedded and traditional java me design embedded systems are typically designed to perform a specific task unlike a generalpurpose computer that strives to handle multiple tasks with equal efficiency some embedded systems also have realtime performance constraints for safety and usability; others may have little or no performance requirements allowing the system hardware to be simplified to reduce costs as such developers should use the simplest application design possible to avoid overtaxing the embedded system memory resources are frequently limited in embedded devices often memory is the most valuable resource many embedded devices have memory that is measured in megabytes mb and some of it is used by the runtime operating system rtos leaving the remainder for use by the java vm and its applications be aware of how much memory is typically used by your application the rtos and the java vm this will vary from one embedded board to another by the time a java me embedded application exhausts all memory and is subject to an outofmemoryerror there are few options left the application must either force the vm to free any unnecessary memory using a systemgc call or if that doesn't work crash threads java threads are often an expensive resource with embedded java vms java embedded applications work best when using minimal application threads if you must create multithreaded code be sure to minimize the use of synchronized code which can be expensive on embedded devices as a general rule avoid using the timer class as an extra thread is created for each timer a common technique for creating java me embedded applications is to create a background thread in the startapp method of the midlet class and reuse it throughout the imlet lifecycle system callbacks system callback functions should never block and should return as soon as possible to avoid slowing down the cldc vm pay special attention to the following midlet methods • startapp java me optimization techniques a • pauseapp • midlet constructor inputoutput the record management system rms is an io resource that should be used carefully with any application that uses recordstore objects opening and closing operations should be minimized in addition strive to group reads and writes in one section of code as much as possible spreading recordstore read and writes across the application can slow down the application another common strategy when working with recordstore objects is to use buffers which reside in memory and are often faster this is a common technique • for reading record stores read the entire record into a buffer then parse the buffer • for writing record stores write to a single buffer then write the buffer to a record general tips here are some other general hints for optimizing your code that are pervasive throughout the industry for java me code • object creation is very costly with respect to memory and performance overhead create objects only when needed and reuse any object instances that are created in a cache • use lazy instantiation if appropriate however many java me developers will create all objects outside the main loop of the program and reuse them as the application runs with reusable objects be sure to include a method that returns them to the original state independent of the object constructor • avoid autoboxing when possible • do not perform assertions in tight loops • avoid using variablelength arguments varargs • use local variables instead of global variables when you can local variables are faster and generate less bytecode • only include system classes that you need avoid using wild character imports like import javautil* instead import classes directly such as import javautildate • don't perform string concatenations using the + operator use the stringbuffer class instead for example don't do the following string str = new string hello ;str += world; instead do this stringbuffer str = new stringbuffer hello ;strappendworld; remember that in java string objects are immutable so performing concatenation with the + operator will in fact create a stringbuffer copy the contents of the string over append the other string then copy the result back into a different immutable string object inputoutput a developer’s guide • divide your multidimensional arrays into singledimensional arrays multidimensional arrays take more time to calculate the proper index in memory • avoid any unnecessary creation and disposal of objects and variables inside loops for example avoid a construct like this for int i = ; i < length; i++ myconstantclass c = new myconstantclass; resultsi = cdosomething; • use a switchcase construct instead of if blocks as they are compiled into more optimized bytecode remember that starting with java the switch keyword can handle strings which is more efficient that creating a large number of if blocks that test using the equals method • use public variables directly instead of using getset accessors • set variables to null when you don't need them anymore to assist with garbage collection application size aside from minimizing the number of classes in your application developers can also make use of obfuscator tools which are present in netbeans and other idess the original purpose of an obfuscator is to make reverse engineering bytecode more difficult however it can also create smaller and often faster class files in fact obfuscators typically reduce java me embedded class file size by % to % the netbeans ide contains an option to install the proguard obfuscator library you can choose this option by rightclicking on your project and bringing up the project properties next expand the build leaf and select obfuscating if progaurd is not already installed press the button to download and install the netbeans module as shown in figure a application size java me optimization techniques a figure a installing the proguard obfuscator library once the obfuscator is installed choose an obfuscation level by moving the slider anywhere from level and level as shown in figure a each level presents a detailed description in the window below that shows what operations the obfuscator is performing figure a choosing an obfuscation level application size a developer’s guide b java me embedded properties this appendix documents the configurable options that are found in many ports of the oracle java me embedded product system properties in the oracle java me embedded distribution can be configured in one of two ways by modifying the jwcpropertiesini file if available or by using the vm proxy commandline interface cli modifying the properties file most platforms have a jwcpropertiesini file that can be modified with a text editor the jwcpropertiesini file has two distinct sections • application properties that are used by java applications that are running on the board • internal properties used for internal system configuration in addition each jwcpropertiesini file contains comments that help describe the purpose of each entry it is highly recommend that you read through the original jwcpropertiesini file for your target embedded board as it contains essential information about each property note that the oracle java me embedded runtime may alter the values inside of the jwcpropertiesini file at any time especially if the setproperty and saveproperties commands are issued in the cli and typically without comments so it helps to study the original version that comes with each distribution bundle using the commandline interface in addition to specifying properties in the jwcpropertiesini file system properties can also be modified on the fly using the cli setproperty command the setproperty command uses the following syntax setproperty <key> <value> if you wish to examine the current value of any property use the getproperty command getproperty <key> note that after any property change the vm state is unpredictable and it is necessary to issue the saveproperties command and 'shutdown r' or depending on the embedded board cycle the power to activate the changes see chapter for more information on using the vm proxy cli java me embedded properties b the list of configurable system properties differs extensively on each platform and with each release and may be retrieved by issuing the following command via the cli proxy > propertieslist for example the properties list that is generated for the raspberry pi would look similar to the following read only string xmlrpcsubsetversion = readwrite string xmljaxpsubsetversion = readwrite bool vmconfigsystemreboot = false read only string systemstorageroot = appdb readwrite bool systemnetworkreconnect = false readwrite int systemjamspace = read only string systemdefaultstorage = appdb read only string socket = comsunmidpiojmesocketprotocolpushimpl readwrite string securityprovidersjar = null several lines omitted readwrite int amsmemorylimitmvm = using the commandline interface b developer’s guide c signing an imlet suite's jar file establishing trust is important for imlet suites that use securitysensitive apis signing an imlet suite's jar file allows the suite to be trusted a jar file is signed with the jadtool utility a copy of the jadtool utility is provided with the oracle java me embedded software bundle the jadtool utility signs a jar file by adding a certificate and the jar file's digital signature to a java application descriptor jad file adding a certificate and a jar file's digital signature to a jad file are separate steps you must complete both steps to sign a jar file the steps are in “instructions for using jadtool” you can also use the jadtool utility to obtain information about a certificate in a jad file the information can include the name of the entity that issued the certificate the certificate's serial number the dates between which it is valid and its message digest algorithm md and secure hash algorithm sha fingerprints instructions for using jadtool this section explains how to use the jadtool utility through an example that signs a hypothetical imlet suite named imaginaryimlet note imaginaryimlet is not an actual imlet suite no imaginaryimlet files are included with this release the example uses the key pair provided with the software the key pair is in the jsetestkeystorebin file which is a keystore managed with the java se platform's keytool utility for information on the keytool utility see http downloadoraclecomjavasedocstechnotestoolswindows keytoolhtml after you build an implementation of the software jsetestkeystorebin is located in this directory outputdirmeepbini where outputdir is the directory that contains the output of your builds of the oracle java me embedded software the password for the file is keystorepwd the alias of the key pair is dummyca the private key password is keypwd the file is provided for testing purposes for imlet suites on enduser devices use an rsa key pair backed by a certificate or certificate chain from a certificate authority you must import the certificate or certificate chain into a java se platform's keystore with the java se platform's keytool utility signing an imlet suite's jar file c the jadtool utility is packaged in a jar file named jadtooljar in this directory where ojmeedir is the base directory of the oracle java me embedded installation ojmeedir\toolkitlib\process\jadtool\code using the jadtool utility open a windows command prompt change your current directory to the directory that holds your imlet's jar and jad files add the certificate for your key pair to the jad file using the jadtool utility the jadtool utility adds the certificate as the value of an attribute named midletcertificatemn where m is the number of the certificate chain it defaults to one but you can provide a different number with the chainnum switch and n is an integer that for new certificates begins at one and increments by one each time you add a new certificate to the jad file for example if outputdirbinaries is c\jme\src\output\binaries the following command adds the certificate as the value of the attribute midletcertificate to the example jad file c\myimlets>java jar %ojmeehome%\toolkitlib\process \jadtool\code\jadtooljar addcert alias dummyca storepass keystorepwd keystore c\jme\src\output\midp\bin \i\jsetestkeystorebin inputjad imaginaryimletjad outputjad imaginaryimletjad optional verify that the certificate is added to the jad file by using the jadtool utility to list the certificate in the jad file c\myimlets>java jar %ojmeehome%\toolkitlib\process \jadtool\code\jadtooljar showcert certnum inputjad imaginaryimletjad subject c=us st=ca l=santa clara o=dummy ca ou=jct cn=thehost issuer c=us st=ca l=santa clara o=dummy ca ou=jct cn=thehost serial number decea valid from wed jul  pdt to sat jul  pdt certificate fingerprints md fecddbbfb sha dccecdefebfbdfedac if you have a key pair backed by a certificate chain import the intermediate certificates import the intermediate certificates using the jadtool utility with the addcert switch shown in step taking care to use the correct chain order for example the xxxx company provides a certificate that vouches for your key pair the widgetcertificates company vouches for the xxxx certificate and verisign vouches for the widgetcertificates certificate import the xxxx certificate followed by the widgetcertificate the xxxx certificate is midletcertificate and the widgetcertificate certificate is midletcertificate using the jadtool utility c developer’s guide note you do not import the certificate of the root ca in this example the certificate is from verisign the root certificate is on the device sign the jar file using the jadtool utility the jadtool utility signs the jar file base encodes the signature and stores it as the value of the midletjarrsasha attribute of the output jad file note the key used to sign the jar file must be from the same java se keystore entry as key pair specified in step the jadtool utility does not check that the jar file is signed with a keystore entry that has a certificate in the jad file for example c\myimlets>java jar %ojmeehome%\toolkitlib\process \jadtool\code\jadtooljar addjarsig keystore c\jme\src \output\midp\bin\i\jsetestkeystorebin alias dummyca storepass keystorepwd keypass keypwd jarfile imaginaryimletjar chainnum inputjad imaginaryimletjad outputjad imaginaryimletjad optionally you can sign a jar file with a stronger signature jad attribute midletjarrsasha using the usesha command line switch for example java jar jadtooljar addjarsig usesha keystore jsetestkeystorebin alias dummyca storepass keystorepwd keypass keypwd jarfile imaginaryimletjar inputjad imaginaryimletjad outputjad imaginarysignedshaimletjad handling expired certificates a jad file can have multiple certificate but it can hold the signature for only one jar file when a certificate in the jad file expires you must add a new certificate and resign the jar file when resigning the jar file the jadtool utility overwrites the current digital signature with the new one options summary the jadtool utility supports the following options • none running the tool without options returns the same information as the help option • addcert alias keyalias keystore keystore  storepass password  chainnum chainnumber  certnum certnumber  encoding encoding inputjad inputjadfile outputjad outputjadfile adds a certificate to a jad file to add a certificate this utility first creates the certificate from the entry identified by keyalias in keystore the keystore if provided must be a java cryptography architecture keystore a file containing data such as key handling expired certificates signing an imlet suite's jar file c entries in a format that the java se platform can use if keystore is not provided its default userhomedirkeystore is used if keystore requires a password to access its contents password must be provided after creating the certificate and attribute name this utility concatenates the contents of inputjadfile with the new certificate and writes it as outputjadfile you can use the same file for the inputjadfile and outputjadfile the certificate is in the jad file as the value of an attribute named midletcertificatemn where • m is chainnumber or if it is not provided a jad file can contain multiple certificate chain • n is certnumber the value certnumber depends on whether the new certificate replaces an existing certificate if the certificate is a replacement then certnumber must be the number of the certificate to replace for example if the new certificate would replace the one stored as the value of attribute midletcertificate then certnumber must be if the certificate is new certnumber is ignored if inputjadfile uses an encoding other than utf ascii with unicode escapes encoding must be specified this utility uses the same encoding for reading inputjadfile and writing outputjadfile • addjarsig usesha jarfile jarfile alias keyalias  keystore keystore storepass storepassword keypass keypassword  encoding encoding chainnum chainnumber inputjad inputjadfile outputjad outputjadfile creates a digital signature for jarfile if jarfile is not specified the value of the midletjarurl attribute from inputjadfile is used the attribute's value must be a valid http url this utility creates a digital signature for the jar file using the private key identified by keyalias in keystore if keystore is not provided its default is userhomedirkeystore this utility gets the key from keystore using storepassword and keypassword and creates the signature with it using the emsapkcsv encoding method of pkcs # version see rfc at http wwwietforgrfcrfctxt after creating the signature this utility concatenates the contents of inputjadfile with the signature and writes it as outputjadfile the signature is base encoded and is in the output jad file as the value of the midletjarrsasham attribute where m is chainnumber or if it is not provided this number corresponds to the value for m in the midletcertificatemn attribute if inputjadfile uses an encoding other than utf ascii with unicode escapes encoding must be specified this utility uses the same encoding for reading inputjadfile and writing outputjadfile • help prints a usage summary • showcert  certnum certnumber  chainnum chainnumber all  encoding encoding inputjad inputjadfile options summary c developer’s guide prints information about either all certificates or the certificate that corresponds to the given certnumber and chainnumber in the inputjadfile the option all cannot be combined with the certnum and chainnum options the chainnumber of a certificate is the m in the jad file's midletcertificatemn attribute while the certnumber is the n for example to show the certificate that is the value of attribute midletcertificate the chainnumber must be and certnumber must be if certnumber or chainnumber are not provided and the all option is not used the utility uses a the information printed includes the certificate's subject issuer serial number dates between which it is valid and fingerprints md and sha the attributes in the subject and issuer names are shown in reverse order from what is in the certificate a side effect of using the java se platform certificate api as a result the names might not match what is returned from other tools that display a certificate's subject and issuer names if inputjadfile uses an encoding other than utf ascii with unicode escapes encoding must be specified the tool uses the same encoding for reading inputjadfile and writing outputjadfile options summary signing an imlet suite's jar file c options summary c developer’s guide d managing keys and certificates the oracle java me embedded platform uses public keys from a certificate authority ca to validate web sites and signed imlet suites the oracle java me embedded implementation also uses private keys from certificates to establish secure connections with client authentication when the platform uses a secure protocol to access a web site the site provides a certificate which is typically signed by a ca in the same manner signed imlet suites also contain a certificate that is signed by a ca the oracle java me embedded platform checks the validity of a certificate by using the ca's public key by signing a certificate a ca certifies the identify of the owner of the web site or imlet suite you can manage the ca certificates public keys and private keys on the embedded board by using the mekeytool utility the mekeytool utility is provided with the java me sdk distribution and is similar to the keytool utility provided with the java se platform except that mekeytool will also operate across a network on the keystores of an embedded device that is currently recognized by the oracle java me embedded device manager this chapter describes how to use mekeytool to manage keystores that are used by the oracle java me embedded emulator or recognized by the oracle java me sdk device manager running mekeytool mekeytool is an executable that can be found in the following location mesdkhomedir\bin\mekeytoolexe where mesdkhomedir is the base directory of the oracle java me embedded installation to connect to a keystore on an embedded board instead of the emulator add the xdevice option to reference a device currently recognized by the oracle java me embedded device manager mekeytoolexe xdeviceembeddedexternaldevice warning each embedded board may only accept a limited subset of commands depending on the functionality offered to list the functionality supported by the device embeddedexternaldevice for example you can use the emulator's xquery option emulatorexe xquery xdeviceembeddedexternaldevice managing keys and certificates d using the mekeytool utility open a command prompt or terminal window change your current directory to the location of the exe file shown above or add the directory to your current %path% run mekeytool with the options needed for example use the following command to display help mekeytoolexe help me keystores the mekeytool utility keeps the ca certificates public keys and private keys in an me keystore depending on the device the keystore is at the following locations where basedir is the base directory of the oracle java me embedded or oracle java me sdk installation table d location of keystores device location emulator basedirruntimesmeepappdbcerts embedded boards basedirappdbcerts if file system is accessible this keystore directory contains an index file named mainks and a set of certificate files the platform includes the key of one ca warning oracle does not recommend modifying the default keystore but instead modifying a copy either one that is usergenerated or in the working directory for the appropriate device working directory for the emulator when the oracle java me embedded emulator is first started it creates a working directory in userhomedirjavamesdkversionworkdeviceappdbcerts note that this is only the case for emulated devices such as embeddeddevice not devices that map to actual embedded boards such as embeddedexternaldevice next it copies all certificates and several other important files there be aware that deleting the working directory removes all device settings and of course any additions to the local keystore note the mekeytool utility enables you to import keys from java se keystores however you cannot use the mekeytool utility directly on a java se keystore for example if you try to use the mekeytool utility to view public keys in a java se keystore the utility displays an error message that the keystore is corrupted an me keystore has a different format java se platform using the mekeytool utility d developer’s guide keystores which have a format in accordance with the java cryptography architecture specification creating and managing multiple me keystores in addition to managing the public keys in the me keystore you can use the mekeytool utility to manage additional me keystores both with the emulator and some embedded boards that contain an accessible filesystem for example during testing you might want to have multiple keystores to run against one keystore could contain all the necessary testing keys a second keystore could contain a subset of the testing keys and a third keystore could contain an expired key creating alternate me keystores the mekeytool utility does not create a new me keystore directory the developer must create an empty keystore first consisting of a directory and an empty mainks file which can be copied from the keystore provided with the distribution bundle see importing a key for instructions on how to import a key managing alternate me keystores to manage a keystore other than the default use the import mekeystore option mekeytoolexe import mekeystore keystorename for example if you created an me keystore userhomedir\mykeys \settestkeysks that contains the keys that are needed to run a particular set of tests use the mekeytool command to manage that keystore mekeytoolexe import mekeystore userhomedirmykeys settestkeysks for all mekeytool commands you receive an error message if the file that you provide as an argument to mekeystore does not exist importing a key you can add a key to an me keystore by importing it from the java cryptography architecture keystore that comes with the java se platform or from a keystore that you create for more information on the keystore that comes with the java se platform see httpdownloadoraclecomjavasedocstechnotes toolswindowskeytoolhtml the file name for the java se keystore is keystore and the default location is in your home directory this file is created if you use the java se platform's keytool utility to create keys and you do not specify a different location the mekeytool utility references this keystore unless you use the keystore argument to specify a different keystore note if you use a java se keystore other than the default the new keystore might require a password the import option imports a key for example to add a key with an alias dummyca from the java se keystore jsetestkeystorebin that has a password importing a key managing keys and certificates d keystorepwd to the me keystore at userhomedirmykeys settestkeysks c\>mekeytoolexe import alias dummyca keystore jsetestkeystorebin storepass keystorepwd mekeystore mykeyssettestkeysks if it is necessary to import a certificate with a private key from a file in pkcs format for example certwithkeyp with the keystore password storepwd and the key password keypwd use the command c\>mekeytoolexe import keystore certwithkeyp storepass storepwd keypass keypwd mekeystore mykeys\settestkeysks listing available keys an me keystore organizes the keys that it contains by giving each one a number for each key the keystore also holds the name of the entity to whom the public key belongs the time over which the key is valid and the domain associated with the key the mekeytool list command displays information for each key in a particular keystore the following example lists the contents of the me keystore userhomedir mykeyssettestkeysks c\>mekeytoolexe list mekeystore mykeyssettestkeysks key  owner c=us;o=verisign inc;ou=class public primary certification authority valid from mon jan  msk to wed aug  msd  security domain identifiedthirdparty enabled true key  owner o=oracle;c=myserver valid from sat aug  pdt to tue jul  pdt  security domain operator enabled true the following example lists of the contents of the me keystore on a raspberry pi device currently listed as embeddedexternaldevice again note that the device must already be registered with the device manager c>mekeytoolexe list xdeviceembeddedexternaldevice owner cn=addtrust external ca rootou=addtrust external ttp networko=addtrust abc=se valid from tue may  pdt till sat may  pdt  owner cn=globalsign root caou=root cao=globalsign nvsac=be valid from tue sep  pdt till fri jan  pst  owner cn=gte cybertrust global rootou=gte cybertrust solutions\ inco=gte corporationc=us valid from wed aug  pdt till mon aug  pdt  owner cn=entrustnet secure server certification authorityou=c entrustnet limitedou=wwwentrustnetcps incorp by ref limits liabo=entrustnetc=us valid from tue may  pdt till sat may  pdt  listing available keys d developer’s guide owner ou=class public primary certification authorityo=verisign\ incc=us valid from sun jan  pst till tue aug  pdt  owner ou=verisign trust networkou=c verisign\ inc for authorized use onlyou=class public primary certification authority go=verisign\ incc=us valid from sun may  pdt till tue aug  pdt  owner cn=thehostou=unknowno=testl=unknownst=unknownc=us valid from wed nov  pst till sat nov  pst  owner cn=geotrust ca for utio=unified testing initiative utic=us valid from thu jan  pst till tue jan  pst  owner =#dddefd cn=thawte premium server caou=certification services divisiono=thawte consulting ccl=cape townst=western capec=za valid from wed jul  pdt till thu dec  pst  owner ou=equifax secure certificate authorityo=equifaxc=us valid from sat aug  pdt till wed aug  pdt deleting a key when keys expire you must delete them from the keystore and add their replacements you can also delete unused keys for example if you added the public key of a test site with a selfsigned certificate during testing you can delete that key when testing is completed the delete command to the mekeytool utility removes a key from an me keystore the delete command requires one of the following options • owner ownername sets the string that describes the owner of the public key in a given keystore use the list command to print information about each key in the keystore the string in the command must match the one printed when you use the list command to the mekeytool utility see listing available keys for more information • number keynumber sets the number that a given keystore has assigned to each of its keys the number is greater than or equal to one use the list command to print the number that the keystore has assigned to each of its keys see listing available keys for more information the following examples show two ways to delete a key from the me keystore userhomedirmykeyssettestkeysks the keystore used in listing available keys • deleting a key by using its key numberc\>mekeytoolexe delete number mekeystore mykeys \settestkeysks deleting a key managing keys and certificates d • deleting a key by using its owner namec\>mekeytoolexe delete owner c=us;o=verisign\ inc;ou=class public primary certification authority \mekeystore mykeys\settestkeysks replacing a key some situations require that you replace a key such as when a key expires to replace a key first delete the old key then import the new key note if you import the new key before deleting the old one the mekeytool utility displays an error message that the owner of the key has a key in the me keystore mekeytool summary the mekeytool utility supports the following options • no option runs the tool without options and returns the same information as the help option • help prints a usage summary • import alias keyalias keystore javasekeystore  keypass keypassword  storepass storepassword  client clientname imports a key identified by security client clientname or keyalias from javasekeystore into the device keystore if javasekeystore is not provided its default userhomedirkeystore is used where userhomedir is the user's home directory if javasekeystore requires a password you must provide storepassword if the keypass argument is provided the private key will be imported to the me keystore together with public certificate • list client clientname lists the number owner and validity period and domain of the key identified by security client clientname or all keys if the option is omitted in the device keystore • delete client clientname  owner ownername number keynumber deletes the key identified by security client clientname ownername or keynumber from the device keystore you can provide either ownername or keynumber but not both you can find the valid values for them by running the mekeytool utility with the list command • export client clientname  number keynumber  out outputfile exports a certificate specified by security client clientname or keynumber from the device keystore to the output file outputfile the format of the outputfile is replacing a key d developer’s guide – pem in the case of an extracted public key or certificate – pkcs# in the case of an extracted certificate with a private key the keystore password of the pkcs# file is the same password that was used in the keypass parameter of the import command • clients presents a list of all the security clients defined in the system that can accept public keys mekeytool summary managing keys and certificates d mekeytool summary d developer’s guide e oem extensions this chapter describes the oem extensions which provide a mechanism to add extensions to the binary runtime of the oracle java me embedded software using oem extensions the oracle java me embedded software enables you to extend the binary runtime by making your own java packages available to imlets as oem extensions you specify the location of the jar files that contain your packages in a configuration file and imlets can use those packages at run time to make your packages available to imlets as oem extensions follow these steps write the java classes in your package compile your classes preverify your classes create a jar file that contains your classes add the jar file to the configuration file jwcpropertiesini a edit the file jwcpropertiesini this file is located in runtimes meepbinjwcpropertiesini in the windows distribution and in javajwcpropertiesini in the distribution for the reference board b locate the line that contains the configuration setting extraclasspath c add the location of your jar file use a semicolon between paths if you have more than one jar file for example extraclasspath = cmyjarjar;cmyjarjar note you must use forward slashes in the paths in extraclasspath share the jar file and the details of your packages with the imlet programmers that need to use your classes oem extensions e using oem extensions e developer’s guide f encryption algorithms the java me product includes the following supported cipher suites and encryption algorithms with specified key lengths supported algorithms for windows linux and raspberry pi platforms tlsv are supported with the following configurations note the following cipher suites are disabled by default but can be enabled in the jwcpropertiesini file by modifying the sslforbiddenciphersfilter property tlsecdhanon* these are nonsecure anonymous cipher suites in order to enable these replace !anull with anull in the properties file *withnull* these are nonsecure unencrypted cipher suites in order to enable these replace !enull with enull in the properties file tlsv tlsv refer to the list of cipher suites in the priority ordering tlsecdhersawithaesgcmsha tlsecdheecdsawithaesgcmsha tlsecdhersawithaescbcsha tlsecdheecdsawithaescbcsha tlsecdhersawithaescbcsha tlsecdheecdsawithaescbcsha tlsecdhrsawithaesgcmsha tlsecdhecdsawithaesgcmsha tlsecdhrsawithaescbcsha tlsecdhecdsawithaescbcsha tlsecdhrsawithaescbcsha tlsecdhecdsawithaescbcsha tlsrsawithaesgcmsha tlsrsawithaescbcsha tlsrsawithaescbcsha tlspskwithaescbcsha tlsecdhersawithaesgcmsha tlsecdheecdsawithaesgcmsha tlsecdhersawithaescbcsha tlsecdheecdsawithaescbcsha tlsecdhersawithaescbcsha tlsecdheecdsawithaescbcsha tlsecdhrsawithaesgcmsha tlsecdhecdsawithaesgcmsha encryption algorithms f tlsecdhrsawithaescbcsha tlsecdhecdsawithaescbcsha tlsecdhrsawithaescbcsha tlsecdhecdsawithaescbcsha tlsrsawithaesgcmsha tlsrsawithaescbcsha tlsrsawithaescbcsha sslrsawithideacbcsha tlspskwithaescbcsha tlsecdhersawithdesedecbcsha tlsecdheecdsawithdesedecbcsha tlsecdhrsawithdesedecbcsha tlsecdhecdsawithdesedecbcsha sslrsawithdesedecbcsha tlspskwithdesedecbcsha sslrsawithdescbcsha sslrsaexportwithdescbcsha supported algorithms for windows linux and raspberry pi platforms f developer’s guide glossary access point a networkconnectivity configuration that is predefined on a device an access point can represent different network profiles for the same bearer type or for different bearer types that may be available on a device such as wifi or bluetooth adc analogtodigital converter a hardware device that converts analog signals time and amplitude into a stream of binary numbers that can be processed by a digital device ams application management system the system functionality that completes tasks such as installing applications updating applications and managing applications between foreground and background apdu application protocol data unit a communication mechanism used by sim cards and smart cards to communicate with card reader software or a card reader device api application programming interface a set of classes used by programmers to write applications that provide standard methods and interfaces and eliminate the need for programmers to reinvent commonly used code arm advanced risc machine a family of computer processors using reduced instruction set risc cpu technology developed by arm holdings arm is a licensable instruction set architecture isa and is used in the majority of embedded platforms at commands a set of commands developed to facilitate modem communications such as dialing hanging up and changing the parameters of a connection also known as the hayes command set at means attention glossary axf arm executable format an arm executable image generated by arm tools bip bearer independent protocol allows an application on a sim card to establish a data channel with a terminal and through the terminal to a remote server on the network cdma code division multiple access a mobile telephone network standard used primarily in the united states and canada as an alternative to gsm cldc connected limited device configuration a java me platform configuration for devices with limited memory and network connectivity it uses a lowfootprint java virtual machine such as the cldc hotspot implementation and several minimalist java platform apis for application services configuration defines the minimum java runtime environment for example the combination of a java virtual machine and a core set of java platform apis for a family of java me platform devices dac digitaltoanalog converter a hardware device that converts a stream of binary numbers into an analog signal time and amplitude such as audio playback etsi european telecommunications standards institute an independent nonprofit group responsible for the standardization of information and communication technologies within europe although based in europe it carries worldwide influence in the telecommunications industry gcf generic connection framework a part of cldc it is a java me api consisting of a hierarchy of interfaces and classes to create connections such as http datagram or streams and perform io gpio general purpose inputoutput unassigned pins on an embedded platform that can be assigned or configured as needed by a developer axf glossary gpio port a group of gpio pins typically pins arranged in a group and treated as a single port gsm global system for mobile communications a g mobile telephone network standard used widely in europe asia and other parts of the world http hypertext transfer protocol the most commonly used internet protocol based on tcpip that is used to fetch documents and other hypertext objects from remote hosts https secure hypertext transfer protocol a protocol for transferring encrypted hypertext data using secure socket layer ssl technology iccid integrated circuit card identification the unique serial number assigned to an individual sim card impng information module profile next generation a profile for embedded headless devices the impng specification jsr is a subset of midp that leverages many of the apis of midp including the latest security and networking+ but does not include graphics and user interface apis imei international mobile equipment identifier a number unique to every mobile phone it is used by a gsm or umts network to identify valid devices and can be used to stop a stolen or blocked phone from accessing the network it is usually printed inside the battery compartment of the phone imlet an application written for impng an imlet does not differ from midp midlet except by the fact that an imlet can not refer to midp classes that are not part of impng an imlet can only use the apis defined by the impng and cldc specifications imlet suite a way of packaging one or more imlets for easy distribution and use similar to a midlet suite but for smaller applications running in an embedded environment imlet suite glossary imsi international mobile subscriber identity a unique number associated with all gsm and umts network mobile phone users it is stored on the sim card inside a phone and is used to identify itself to the network ic interintegrated circuit a multimaster serial computer bus used to attach lowspeed peripherals to an embedded platform isa instruction set architecture the part of a computer's architecture related to programming including data type addressing modes interrupt and exception handling io and memory architecture and native commands reduced instruction set computing risc is one kind of instruction set architecture jad file java application descriptor file a file provided in a midlet suite that contains attributes used by application management software ams to manage the midlet's life cycle and other applicationspecific attributes used by the midlet suite itself jar file java archive file a platformindependent file format that aggregates many files into one multiple applications written in the java programming language and their required components class files images sounds and other resource files can be bundled in a jar file and provided as part of a midlet suite jcp java community process the global standards body guiding the development of the java programming language jdts java device test suite a set of java programming language tests developed specifically for the wireless marketplace providing targeted standardized testing for cldc and midp on small and handheld devices java me platform java platform micro edition a group of specifications and technologies that pertain to running the java platform on small devices such as cell phones pagers settop boxes and embedded devices more specifically the java me platform consists of a configuration such as cldc and a profile such as midp or impng tailored to a specific class of device imsi glossary jsr java specification request a proposal for developing new java platform technology which is reviewed developed and finalized into a formal specification by the jcp program java virtual machine a software “execution engine that safely and compatibly executes the byte codes in java class files on a microprocessor kvm a java virtual machine designed to run in a small limited memory device the cldc configuration was initially designed to run in a kvm lcdui liquid crystal display user interface a user interface toolkit for interacting with liquid crystal display lcd screens in small devices more generally a shorthand way of referring to the midp user interface apis midlet an application written for midp midlet suite a way of packaging one or more midlets for easy distribution and use each midlet suite contains a java application descriptor file jad which lists the class names and files names for each midlet and a java archive file jar which contains the class files and resource files for each midlet midp mobile information device profile a specification for a java me platform profile running on top of a cldc configuration that provides apis for application life cycle user interface networking and persistent storage in small devices msisdn mobile station integrated services digital network a number uniquely identifying a subscription in a gsm or umts mobile network it is the telephone number to the sim card in a mobile phone and used for voice fax sms and data services mvm multiple virtual machines a software mode that can run more than one midlet or imlet at a time mvm glossary obfuscation a technique used to complicate code by making it harder to understand when it is decompiled obfuscation makes it harder to reverseengineer applications and therefore steal them optional package a set of java me platform apis that provides additional functionality by extending the runtime capabilities of an existing configuration and profile preemption taking a resource such as the foreground from another application preverification due to limited memory and processing power on small devices the process of verifying java technology classes is split into two parts the first part is preverification which is done offdevice using the preverify tool the second part which is verification occurs on the device at runtime profile a set of apis added to a configuration to support specific uses of an embedded or mobile device along with its underlying configuration a profile defines a complete and selfcontained application environment provisioning a mechanism for providing services data or both to an embedded or mobile device over a network pulse counter a hardware or software component that counts electronic pulses or events on a digital input line for example a gpio pin push registry the list of inbound connections across which entities can push data each item in the list contains the url protocol host and port for the connection the entity permitted to push data through the connection and the application that receives the connection risc reduced instruction set computing a cpu design based on simplified instruction sets that provide higher performance and faster execution of individual instructions the arm architecture is based on risc design principles obfuscation glossary rlarm realtime library a group of tightly coupled libraries designed to solve the realtime and communication challenges of embedded systems based on arm processorbased microcontroller devices rmi remote method invocation a feature of java se technology that enables java technology objects running in one virtual machine to seamlessly invoke objects running in another virtual machine rms record management system a simple recordoriented database that enables an imlet or midlet to persistently store information and retrieve it later midlets can also use the rms to share data rtos realtime operating system an operating system designed to serve realtime application requests it uses multitasking an advanced scheduling algorithm and minimal latency to prioritize and process data rtsp real time streaming protocol a network control protocol designed to control streaming media servers and media sessions scws smart card web server a web server embedded in a smart card such as a sim card that allows http transactions with the card sd card secure digital cards a nonvolatile memory card format for use in portable devices such as mobile phones and digital cameras and embedded systems sd cards come in three different sizes with several storage capacities and speeds sim subscriber identity module an integrated circuit embedded into a removable sim card that securely stores the international mobile subscriber identity imsi and the related key used to identify and authenticate subscribers on mobile and embedded devices slave mode describes the relationship between a master and one or more devices in a serial peripheral interface spi bus arrangement data transmission in an spi bus is initiated by the master device and received by one or more slave devices which cannot initiate data transmissions on their own slave mode glossary smart card a card that stores and processes information through the electronic circuits embedded in silicon in the substrate of its body smart cards carry both processing power and information a sim card is a special kind of smart card for use in a mobile device sms short message service a protocol allowing transmission of short textbased messages over a wireless network sms messaging is the most widelyused data application in the world smsc short message service center the smsc routes messages and regulates sms traffic when an sms message is sent it goes to an sms center first then gets forwarded to the destination if the destination is unavailable for example the recipient embedded board is powered down the message is stored in the smsc until the recipient becomes available soap simple object access protocol an xmlbased protocol that enables objects of any type to communicate in a distributed environment it is most commonly used to develop web services spi serial peripheral interface a synchronous bus commonly used in embedded systems that allows fullduplex communication between a master device and one or more slave devices ssl secure sockets layer a protocol for transmitting data over the internet using encryption and authentication including the use of digital certificates and both public and private keys svm single virtual machine a software mode that can run only one midlet or imlet at a time task at the platform level each separate application that runs within a single java virtual machine is called a task the api used to instantiate each task is a strippeddown version of the isolate api defined in jsr tcpip transmission control protocolinternet protocol a fundamental internet protocol that provides for reliable delivery of streams of data from one host to another smart card glossary terminal profile device characteristics of a terminal mobile or embedded device passed to the sim card along with the imei at sim card initialization the terminal profile tells the sim card what values are supported by the device uart universal asynchronous receivertransmitter a piece of computer hardware that translates data between serial and parallel formats it is used to facilitate communication between different kinds of peripheral devices inputoutput streams and embedded systems to ensure universal communication between devices uicc universal integrated circuit card the smart card used in mobile terminals in gsm and umts networks the uicc ensures the integrity and security of personal data on the card umts universal mobile telecommunications system a thirdgeneration g mobile communications technology it utilizes the radio spectrum in a fundamentally different way than gsm uri uniform resource identifier a compact string of characters used to identify or name an abstract or physical resource a uri can be further classified as a uniform resource locator url a uniform resource name urn or both usat universal sim application toolkit a software development kit intended for g networks it enables usim to initiate actions that can be used for various valueadded services such as those required for banking and other privacy related applications usb universal serial bus an industry standard that defines the cables connectors and protocols used in a bus for connection communication and power supply between computers and electronic devices such as embedded platforms and mobile phones usim universal subscriber identity module an updated version of a sim designed for use over g networks usim is able to process small applications securely using better cryptographic authentication and stronger keys larger memory on usim enables the addition of thousands of contact details including subscriber information contact details and other custom settings usim glossary wae wireless application environment an application framework for small devices which leverages other technologies such as wireless application protocol wap wap wireless application protocol a protocol for transmitting data between a server and a client such as a cell phone or embedded device over a wireless network wap in the wireless world is analogous to http in the world wide web watchdog timer a dedicated piece of hardware or software that watches an embedded system for a fault condition by continually polling for a response if the system goes offline and no response is received the watchdog timer initiates a reboot procedure or takes other steps to return the system to a running state wcdma wideband code division multiple access a detailed protocol that defines how a mobile phone communicates with the tower how its signals are modulated how datagrams are structured and how system interfaces are specified wma wireless messaging api a set of classes for sending and receiving short message service sms messages xml schema a set of rules to which an xml document must conform to be considered valid wae glossary